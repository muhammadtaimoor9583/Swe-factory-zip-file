{
    "task_id": "gabime__spdlog-3244",
    "setup_info": {
        "repo_path": "testbed/gabime__spdlog-3244_2025-06-30_11-27-58",
        "repo_cache_path": "testbed/gabime/spdlog_cache"
    },
    "task_info": {
        "repo": "gabime/spdlog",
        "pull_number": 3244,
        "instance_id": "gabime__spdlog-3244",
        "issue_numbers": [
            "3241"
        ],
        "base_commit": "63f0875000bf90867aa7c76a831bd834cb7d4b5e",
        "patch": "diff --git a/include/spdlog/details/os-inl.h b/include/spdlog/details/os-inl.h\n--- a/include/spdlog/details/os-inl.h\n+++ b/include/spdlog/details/os-inl.h\n@@ -483,12 +483,12 @@ SPDLOG_INLINE void utf8_to_wstrbuf(string_view_t str, wmemory_buf_t &target) {\n \n     // find the size to allocate for the result buffer\n     int result_size =\n-        ::MultiByteToWideChar(CP_UTF8, MB_ERR_INVALID_CHARS, str.data(), str_size, NULL, 0);\n+        ::MultiByteToWideChar(CP_UTF8, 0, str.data(), str_size, NULL, 0);\n \n     if (result_size > 0) {\n         target.resize(result_size);\n-        result_size = ::MultiByteToWideChar(CP_UTF8, MB_ERR_INVALID_CHARS, str.data(), str_size,\n-                                            target.data(), result_size);\n+        result_size = ::MultiByteToWideChar(CP_UTF8, 0, str.data(), str_size, target.data(),\n+                                            result_size);\n         if (result_size > 0) {\n             assert(result_size == target.size());\n             return;\n",
        "test_patch": "diff --git a/tests/includes.h b/tests/includes.h\n--- a/tests/includes.h\n+++ b/tests/includes.h\n@@ -26,6 +26,7 @@\n #include \"spdlog/spdlog.h\"\n #include \"spdlog/async.h\"\n #include \"spdlog/details/fmt_helper.h\"\n+#include \"spdlog/details/os.h\"\n \n #ifndef SPDLOG_NO_TLS\n     #include \"spdlog/mdc.h\"\ndiff --git a/tests/test_misc.cpp b/tests/test_misc.cpp\n--- a/tests/test_misc.cpp\n+++ b/tests/test_misc.cpp\n@@ -167,3 +167,21 @@ TEST_CASE(\"default logger API\", \"[default logger]\") {\n     spdlog::drop_all();\n     spdlog::set_pattern(\"%v\");\n }\n+\n+#if (defined(SPDLOG_WCHAR_TO_UTF8_SUPPORT) || defined(SPDLOG_WCHAR_FILENAMES)) && defined(_WIN32)\n+TEST_CASE(\"utf8 to utf16 conversion using windows api\", \"[windows utf]\") {\n+    spdlog::wmemory_buf_t buffer;\n+\n+    spdlog::details::os::utf8_to_wstrbuf(\"\", buffer);\n+    REQUIRE(buffer.data() == std::wstring(L\"\"));\n+\n+    spdlog::details::os::utf8_to_wstrbuf(\"abc\", buffer);\n+    REQUIRE(buffer.data() == std::wstring(L\"abc\"));\n+\n+    spdlog::details::os::utf8_to_wstrbuf(\"\\xc3\\x28\", buffer); // Invalid UTF-8 sequence.\n+    REQUIRE(buffer.data() == std::wstring(L\"\\xfffd(\"));\n+\n+    spdlog::details::os::utf8_to_wstrbuf(\"\\xe3\\x81\\xad\\xe3\\x81\\x93\", buffer); // \"Neko\" in hiragana.\n+    REQUIRE(buffer.data() == std::wstring(L\"\\x306d\\x3053\"));\n+}\n+#endif\n",
        "problem_statement": "msvc_sink throws on invalid utf-8\nThis is what `msvc_sink` is doing:\r\n```cpp\r\n    #if defined(SPDLOG_WCHAR_TO_UTF8_SUPPORT)\r\n        wmemory_buf_t wformatted;\r\n        details::os::utf8_to_wstrbuf(string_view_t(formatted.data(), formatted.size()), wformatted);\r\n        OutputDebugStringW(wformatted.data());\r\n    #else\r\n        OutputDebugStringA(formatted.data());\r\n    #endif\r\n```\r\n\r\nThen in `utf8_to_wstrbuf` we have:\r\n```cpp\r\n    int result_size =\r\n        ::MultiByteToWideChar(CP_UTF8, MB_ERR_INVALID_CHARS, str.data(), str_size, NULL, 0);\r\n```\r\n\r\n`MB_ERR_INVALID_CHARS` causes the function to fail on invalid characters, and then `utf8_to_wstrbuf` throws.\r\n\r\nWe've run into this when trying to output game data that wasn't utf-8 encoded, had to roll out our own implementation of `msvc_sink` (https://github.com/OpenEnroth/OpenEnroth/pull/1825).\r\n\r\nMy feel here is that logging should work at best effort basis and should not throw unless absolutely necessary (as exception can lead to `std::terminate`). Log calls can be buried somewhere deep in error handling code, and the usual expectation there is that logging calls don't throw.\r\n\r\nIn this particular case writing out text that's a bit garbled is perfectly OK.\n",
        "hints_text": "Loggers never throw. The sinks might throw but loggers catch everything, so I am not sure what is the problem\n\nAh OK. Then please disregard my comments on safety.\r\n\r\nWhat do you think about just logging the text that's a bit garbled in this case instead of throwing?\nI don't think it's a good idea. Might lead to undefined behavior. \nThere is no UB involved, `MultiByteToWideChar` w/o `MB_ERR_INVALID_CHARS` will just replace invalid code points with `U+FFFD` (\ufffd), or drop them if we're talking older Windows versions.\r\n\r\nThe change is safe, the only concern there is about the difference in behavior. The options are:\r\n1. Throw, potentially causing other loggers in the enclosing `dist_sink` not to run, and write an error to `stderr`.\r\n2. Write out text with \ufffds to msvc debug console.\r\n\r\nMy opinion is that the latter option is strictly better. What am I missing?\nI agree. PR is welcome. Could you also add a simple test for this ?\nSure, will do a PR with a test. Thanks!",
        "created_at": "2024-11-05T20:10:10Z",
        "version": "1.14"
    }
}