[
    {
        "instance_id": "gabime__spdlog-3366",
        "model_name_or_path": "gemini-2.5-flash",
        "dockerfile": "# Base image specification. Defines the foundation OS and architecture for the container (Required)\nFROM --platform=linux/x86_64 ubuntu:22.04\n\nARG DEBIAN_FRONTEND=noninteractive\nENV TZ=Etc/UTC\n\n# System dependencies installation. Installs essential tools and libraries required for development and runtime (Required)\nRUN apt update && apt install -y \\\n    build-essential \\\n    cmake \\\n    git \\\n    && rm -rf /var/lib/apt/lists/*\n\n# Set default workdir to testbed. (Required)\nWORKDIR /testbed/\n\n# Target Project setup. Clones source code, checkouts to the target version, configures it, and installs project-specific dependencies\nRUN git clone https://github.com/gabime/spdlog /testbed \\\n    && cd /testbed \\\n    && git reset --hard faa0a7a9c5a3550ed5461fab7d8e31c37fd1a2ef \\\n    && git remote remove origin \\\n    && chmod -R 777 /testbed",
        "eval_script": "#!/bin/bash\nset -uxo pipefail\ncd /testbed\ngit checkout faa0a7a9c5a3550ed5461fab7d8e31c37fd1a2ef \"tests/test_pattern_formatter.cpp\"\n\n# Apply test patch to update target tests\ngit apply -v - <<'EOF_114329324912'\ndiff --git a/tests/test_pattern_formatter.cpp b/tests/test_pattern_formatter.cpp\n--- a/tests/test_pattern_formatter.cpp\n+++ b/tests/test_pattern_formatter.cpp\n@@ -1,6 +1,8 @@\n #include \"includes.h\"\n #include \"test_sink.h\"\n \n+#include <chrono>\n+\n using spdlog::memory_buf_t;\n using spdlog::details::to_string_view;\n \n@@ -19,6 +21,21 @@ static std::string log_to_str(const std::string &msg, const Args &...args) {\n     return oss.str();\n }\n \n+// log to str and return it with time\n+template <typename... Args>\n+static std::string log_to_str_with_time(spdlog::log_clock::time_point log_time, const std::string &msg, const Args &...args) {\n+    std::ostringstream oss;\n+    auto oss_sink = std::make_shared<spdlog::sinks::ostream_sink_mt>(oss);\n+    spdlog::logger oss_logger(\"pattern_tester\", oss_sink);\n+    oss_logger.set_level(spdlog::level::info);\n+\n+    oss_logger.set_formatter(\n+        std::unique_ptr<spdlog::formatter>(new spdlog::pattern_formatter(args...)));\n+\n+    oss_logger.log(log_time, {}, spdlog::level::info, msg);\n+    return oss.str();\n+}\n+\n TEST_CASE(\"custom eol\", \"[pattern_formatter]\") {\n     std::string msg = \"Hello custom eol test\";\n     std::string eol = \";)\";\n@@ -58,6 +75,15 @@ TEST_CASE(\"date MM/DD/YY \", \"[pattern_formatter]\") {\n             oss.str());\n }\n \n+TEST_CASE(\"GMT offset \", \"[pattern_formatter]\") {\n+    using namespace std::chrono_literals;\n+    const auto now = std::chrono::system_clock::now();\n+    const auto yesterday = now - 24h;\n+\n+    REQUIRE(log_to_str_with_time(yesterday, \"Some message\", \"%z\", spdlog::pattern_time_type::utc, \"\\n\") ==\n+            \"+00:00\\n\");\n+}\n+\n TEST_CASE(\"color range test1\", \"[pattern_formatter]\") {\n     auto formatter = std::make_shared<spdlog::pattern_formatter>(\n         \"%^%v%$\", spdlog::pattern_time_type::local, \"\\n\");\nEOF_114329324912\n\n# Create a build directory, navigate into it, configure CMake to build tests, and build the project\nmkdir -p build\ncd build\ncmake .. -DSPDLOG_BUILD_TESTS=ON\ncmake --build .\n\n# Navigate to the directory where the spdlog-utests executable is located and run the specific test\ncd /testbed/build/tests/\n./spdlog-utests \"[pattern_formatter]\"\nrc=$? # Required: Save the exit code immediately after running tests\n\necho \"OMNIGRIL_EXIT_CODE=$rc\" # Required: Echo the test status\n\n# Return to /testbed for git checkout cleanup\ncd /testbed\ngit checkout faa0a7a9c5a3550ed5461fab7d8e31c37fd1a2ef \"tests/test_pattern_formatter.cpp\"",
        "version": "1.15",
        "repo": "gabime/spdlog",
        "patch": "diff --git a/include/spdlog/details/os-inl.h b/include/spdlog/details/os-inl.h\n--- a/include/spdlog/details/os-inl.h\n+++ b/include/spdlog/details/os-inl.h\n@@ -267,7 +267,8 @@ SPDLOG_INLINE int utc_minutes_offset(const std::tm &tm) {\n \n     #if defined(sun) || defined(__sun) || defined(_AIX) || \\\n         (defined(__NEWLIB__) && !defined(__TM_GMTOFF)) ||  \\\n-        (!defined(_BSD_SOURCE) && !defined(_GNU_SOURCE))\n+        (!defined(__APPLE__) && !defined(_BSD_SOURCE) && !defined(_GNU_SOURCE) && \\\n+            (!defined(_POSIX_VERSION) || (_POSIX_VERSION < 202405L)))\n     // 'tm_gmtoff' field is BSD extension and it's missing on SunOS/Solaris\n     struct helper {\n         static long int calculate_gmt_offset(const std::tm &localtm = details::os::localtime(),\n",
        "status": true
    },
    {
        "instance_id": "gabime__spdlog-3398",
        "model_name_or_path": "gemini-2.5-flash",
        "dockerfile": "# Base image specification. Defines the foundation OS and architecture for the container\nFROM --platform=linux/x86_64 ubuntu:22.04\n\n# Set environment variables for non-interactive apt operations and timezone\nARG DEBIAN_FRONTEND=noninteractive\nENV TZ=Etc/UTC\n\n# System dependencies installation. Installs essential tools and libraries required for C++ development and runtime\nRUN apt update && apt install -y \\\n    build-essential \\\n    cmake \\\n    git \\\n    && rm -rf /var/lib/apt/lists/*\n\n# Set default work directory to /testbed/\nWORKDIR /testbed/\n\n# Target Project setup. Clones source code, checks out to the target version, and configures it\nRUN git clone https://github.com/gabime/spdlog /testbed \\\n    && cd /testbed \\\n    && git reset --hard 7e022c430053f71c3db80bf0eb3432392932f7e3 \\\n    && git remote remove origin \\\n    && chmod -R 777 /testbed\n\n# Build the project, including tests\nRUN mkdir build \\\n    && cd build \\\n    && cmake -DSPDLOG_BUILD_TESTS=ON .. \\\n    && cmake --build . -j$(nproc)",
        "eval_script": "#!/bin/bash\nset -uxo pipefail\n\n# Navigate to the project root directory\ncd /testbed\n\n# Ensure the target test file is at the specified commit SHA before applying any patch\ngit checkout 7e022c430053f71c3db80bf0eb3432392932f7e3 \"tests/test_registry.cpp\"\n\n# Apply test patch (if any exists)\n# The content of the patch will be programmatically inserted here.\ngit apply -v - <<'EOF_114329324912'\ndiff --git a/tests/test_registry.cpp b/tests/test_registry.cpp\n--- a/tests/test_registry.cpp\n+++ b/tests/test_registry.cpp\n@@ -25,6 +25,18 @@ TEST_CASE(\"explicit register\", \"[registry]\") {\n }\n #endif\n \n+TEST_CASE(\"register_or_replace\", \"[registry]\") {\n+    spdlog::drop_all();\n+    auto logger1 = std::make_shared<spdlog::logger>(tested_logger_name,\n+                                                   std::make_shared<spdlog::sinks::null_sink_st>());\n+    spdlog::register_logger(logger1);\n+    REQUIRE(spdlog::get(tested_logger_name) == logger1);\n+\n+    auto logger2 = std::make_shared<spdlog::logger>(tested_logger_name, std::make_shared<spdlog::sinks::null_sink_st>());\n+    spdlog::register_or_replace(logger2);\n+    REQUIRE(spdlog::get(tested_logger_name) == logger2);\n+}\n+\n TEST_CASE(\"apply_all\", \"[registry]\") {\n     spdlog::drop_all();\n     auto logger = std::make_shared<spdlog::logger>(tested_logger_name,\nEOF_114329324912\n\n# Navigate to the build directory where the test executable is located.\n# As per the collected information, all tests in tests/test_registry.cpp are tagged with '[registry]'.\n# The previous attempt failed because the tag '[test_registry]' was incorrect.\n# Correcting the Catch2 filter to '[registry]' to match the actual tags.\ncd build\n./tests/spdlog-utests \"[registry]\"\nrc=$? # Required: Save the exit code immediately after running tests\n\necho \"OMNIGRIL_EXIT_CODE=$rc\" # Required: Echo the test status\n\n# Return to /testbed for git checkout cleanup\ncd /testbed\n# Clean up: Revert changes to the test file to the original state\ngit checkout 7e022c430053f71c3db80bf0eb3432392932f7e3 \"tests/test_registry.cpp\"",
        "version": "1.15",
        "repo": "gabime/spdlog",
        "patch": "diff --git a/include/spdlog/details/registry-inl.h b/include/spdlog/details/registry-inl.h\n--- a/include/spdlog/details/registry-inl.h\n+++ b/include/spdlog/details/registry-inl.h\n@@ -54,6 +54,11 @@ SPDLOG_INLINE void registry::register_logger(std::shared_ptr<logger> new_logger)\n     register_logger_(std::move(new_logger));\n }\n \n+SPDLOG_INLINE void registry::register_or_replace(std::shared_ptr<logger> new_logger) {\n+    std::lock_guard<std::mutex> lock(logger_map_mutex_);\n+    register_or_replace_(std::move(new_logger));\n+}\n+\n SPDLOG_INLINE void registry::initialize_logger(std::shared_ptr<logger> new_logger) {\n     std::lock_guard<std::mutex> lock(logger_map_mutex_);\n     new_logger->set_formatter(formatter_->clone());\n@@ -252,10 +257,14 @@ SPDLOG_INLINE void registry::throw_if_exists_(const std::string &logger_name) {\n }\n \n SPDLOG_INLINE void registry::register_logger_(std::shared_ptr<logger> new_logger) {\n-    auto logger_name = new_logger->name();\n+    auto &logger_name = new_logger->name();\n     throw_if_exists_(logger_name);\n     loggers_[logger_name] = std::move(new_logger);\n }\n \n+SPDLOG_INLINE void registry::register_or_replace_(std::shared_ptr<logger> new_logger) {\n+    loggers_[new_logger->name()] = std::move(new_logger);\n+}\n+\n }  // namespace details\n }  // namespace spdlog\ndiff --git a/include/spdlog/details/registry.h b/include/spdlog/details/registry.h\n--- a/include/spdlog/details/registry.h\n+++ b/include/spdlog/details/registry.h\n@@ -31,6 +31,7 @@ class SPDLOG_API registry {\n     registry &operator=(const registry &) = delete;\n \n     void register_logger(std::shared_ptr<logger> new_logger);\n+    void register_or_replace(std::shared_ptr<logger> new_logger);\n     void initialize_logger(std::shared_ptr<logger> new_logger);\n     std::shared_ptr<logger> get(const std::string &logger_name);\n     std::shared_ptr<logger> default_logger();\n@@ -105,6 +106,7 @@ class SPDLOG_API registry {\n \n     void throw_if_exists_(const std::string &logger_name);\n     void register_logger_(std::shared_ptr<logger> new_logger);\n+    void register_or_replace_(std::shared_ptr<logger> new_logger);\n     bool set_level_from_cfg_(logger *logger);\n     std::mutex logger_map_mutex_, flusher_mutex_;\n     std::recursive_mutex tp_mutex_;\ndiff --git a/include/spdlog/spdlog-inl.h b/include/spdlog/spdlog-inl.h\n--- a/include/spdlog/spdlog-inl.h\n+++ b/include/spdlog/spdlog-inl.h\n@@ -59,6 +59,10 @@ SPDLOG_INLINE void register_logger(std::shared_ptr<logger> logger) {\n     details::registry::instance().register_logger(std::move(logger));\n }\n \n+SPDLOG_INLINE void register_or_replace(std::shared_ptr<logger> logger) {\n+    details::registry::instance().register_or_replace(std::move(logger));\n+}\n+\n SPDLOG_INLINE void apply_all(const std::function<void(std::shared_ptr<logger>)> &fun) {\n     details::registry::instance().apply_all(fun);\n }\ndiff --git a/include/spdlog/spdlog.h b/include/spdlog/spdlog.h\n--- a/include/spdlog/spdlog.h\n+++ b/include/spdlog/spdlog.h\n@@ -25,7 +25,7 @@ namespace spdlog {\n using default_factory = synchronous_factory;\n \n // Create and register a logger with a templated sink type\n-// The logger's level, formatter and flush level will be set according the\n+// The logger's level, formatter and flush level will be set according to the\n // global settings.\n //\n // Example:\n@@ -46,7 +46,7 @@ inline std::shared_ptr<spdlog::logger> create(std::string logger_name, SinkArgs\n //   spdlog::initialize_logger(mylogger);\n SPDLOG_API void initialize_logger(std::shared_ptr<logger> logger);\n \n-// Return an existing logger or nullptr if a logger with such name doesn't\n+// Return an existing logger or nullptr if a logger with such a name doesn't\n // exist.\n // example: spdlog::get(\"my_logger\")->info(\"hello {}\", \"world\");\n SPDLOG_API std::shared_ptr<logger> get(const std::string &name);\n@@ -71,13 +71,13 @@ SPDLOG_API void dump_backtrace();\n // Get global logging level\n SPDLOG_API level::level_enum get_level();\n \n-// Set global logging level\n+// Set the global logging level\n SPDLOG_API void set_level(level::level_enum log_level);\n \n // Determine whether the default logger should log messages with a certain level\n SPDLOG_API bool should_log(level::level_enum lvl);\n \n-// Set global flush level\n+// Set a global flush level\n SPDLOG_API void flush_on(level::level_enum log_level);\n \n // Start/Restart a periodic flusher thread\n@@ -91,9 +91,14 @@ inline void flush_every(std::chrono::duration<Rep, Period> interval) {\n SPDLOG_API void set_error_handler(void (*handler)(const std::string &msg));\n \n // Register the given logger with the given name\n+// Will throw if a logger with the same name already exists.\n SPDLOG_API void register_logger(std::shared_ptr<logger> logger);\n \n-// Apply a user defined function on all registered loggers\n+// Register the given logger with the given name\n+// Will replace any the existing logger with the same name if exists.\n+SPDLOG_API void register_or_replace(std::shared_ptr<logger> logger);\n+\n+// Apply a user-defined function on all registered loggers\n // Example:\n // spdlog::apply_all([&](std::shared_ptr<spdlog::logger> l) {l->flush();});\n SPDLOG_API void apply_all(const std::function<void(std::shared_ptr<logger>)> &fun);\n@@ -111,19 +116,19 @@ SPDLOG_API void shutdown();\n SPDLOG_API void set_automatic_registration(bool automatic_registration);\n \n // API for using default logger (stdout_color_mt),\n-// e.g: spdlog::info(\"Message {}\", 1);\n+// e.g.: spdlog::info(\"Message {}\", 1);\n //\n // The default logger object can be accessed using the spdlog::default_logger():\n // For example, to add another sink to it:\n // spdlog::default_logger()->sinks().push_back(some_sink);\n //\n-// The default logger can replaced using spdlog::set_default_logger(new_logger).\n+// The default logger can be replaced using spdlog::set_default_logger(new_logger).\n // For example, to replace it with a file logger.\n //\n // IMPORTANT:\n // The default API is thread safe (for _mt loggers), but:\n // set_default_logger() *should not* be used concurrently with the default API.\n-// e.g do not call set_default_logger() from one thread while calling spdlog::info() from another.\n+// e.g., do not call set_default_logger() from one thread while calling spdlog::info() from another.\n \n SPDLOG_API std::shared_ptr<spdlog::logger> default_logger();\n \n",
        "status": true
    }
]