2025-07-01 11:05:20.213 | INFO     | Model API request cost info: input_tokens=987, output_tokens=400, cost=0.006468
2025-07-01 11:05:20.245 | DEBUG    | Trying to select search APIs in json. Try 1 of 5.
2025-07-01 11:05:23.628 | INFO     | Model API request cost info: input_tokens=1068, output_tokens=245, cost=0.005120
2025-07-01 11:05:23.633 | DEBUG    | {
  "API_calls": [
    "browse_file_for_environment_info(\"README.md\", \"How to build and run tests, required tools or libraries.\")",
    "browse_file_for_environment_info(\"INSTALL\", \"How to install and build, specifically dependencies and compiler requirements.\")",
    "browse_file_for_environment_info(\"CMakeLists.txt\", \"CMake project configuration, required dependencies, minimum CMake version, and test setup.\")",
    "browse_file_for_environment_info(\"appveyor.yml\", \"CI/CD build and test steps, including tool installation and environment setup.\")",
    "browse_folder(\"tests\", \"1\")"
  ],
  "collected_information": "The project `gabime/spdlog` uses CMake as its build system and targets C++ files, so a C++ development environment is required. The plan is to browse `README.md`, `INSTALL`, `CMakeLists.txt` (root), `appveyor.yml`, and the `tests` directory.",
  "terminate": false
}
2025-07-01 11:05:23.634 | DEBUG    | Extracted a valid json
2025-07-01 11:05:23.653 | INFO     | entering browse
2025-07-01 11:05:23.655 | INFO     | # spdlog

 
[![ci](https://github.com/gabime/spdlog/actions/workflows/linux.yml/badge.svg)](https://github.com/gabime/spdlog/actions/workflows/linux.yml)&nbsp;
[![ci](https://github.com/gabime/spdlog/actions/workflows/windows.yml/badge.svg)](https://github.com/gabime/spdlog/actions/workflows/windows.yml)&nbsp;
[![ci](https://github.com/gabime/spdlog/actions/workflows/macos.yml/badge.svg)](https://github.com/gabime/spdlog/actions/workflows/macos.yml)&nbsp;
[![Build status](https://ci.appveyor.com/api/projects/status/d2jnxclg20vd0o50?svg=true&branch=v1.x)](https://ci.appveyor.com/project/gabime/spdlog) [![Release](https://img.shields.io/github/release/gabime/spdlog.svg)](https://github.com/gabime/spdlog/releases/latest)

Fast C++ logging library


## Install
#### Header-only version
Copy the include [folder](include/spdlog) to your build tree and use a C++11 compiler.

#### Compiled version (recommended - much faster compile times)
```console
$ git clone https://github.com/gabime/spdlog.git
$ cd spdlog && mkdir build && cd build
$ cmake .. && cmake --build .
```
see example [CMakeLists.txt](example/CMakeLists.txt) on how to use.

## Platforms
* Linux, FreeBSD, OpenBSD, Solaris, AIX
* Windows (msvc 2013+, cygwin)
* macOS (clang 3.5+)
* Android

## Package managers:
* Debian: `sudo apt install libspdlog-dev`
* Homebrew: `brew install spdlog`
* MacPorts: `sudo port install spdlog`
* FreeBSD:  `pkg install spdlog`
* Fedora: `dnf install spdlog`
* Gentoo: `emerge dev-libs/spdlog`
* Arch Linux: `pacman -S spdlog`
* openSUSE: `sudo zypper in spdlog-devel`
* ALT Linux: `apt-get install libspdlog-devel`
* vcpkg: `vcpkg install spdlog`
* conan: `conan install --requires=spdlog/[*]`
* conda: `conda install -c conda-forge spdlog`
* build2: ```depends: spdlog ^1.8.2```


## Features
* Very fast (see [benchmarks](#benchmarks) below).
* Headers only or compiled
* Feature-rich formatting, using the excellent [fmt](https://github.com/fmtlib/fmt) library.
* Asynchronous mode (optional)
* [Custom](https://github.com/gabime/spdlog/wiki/Custom-formatting) formatting.
* Multi/Single threaded loggers.
* Various log targets:
  * Rotating log files.
  * Daily log files.
  * Console logging (colors supported).
  * syslog.
  * Windows event log.
  * Windows debugger (```OutputDebugString(..)```).
  * Log to Qt widgets ([example](#log-to-qt-with-nice-colors)).
  * Easily [extendable](https://github.com/gabime/spdlog/wiki/Sinks#implementing-your-own-sink) with custom log targets.
* Log filtering - log levels can be modified at runtime as well as compile time.
* Support for loading log levels from argv or environment var.
* [Backtrace](#backtrace-support) support - store debug messages in a ring buffer and display them later on demand.

## Usage samples

#### Basic usage
```c++
#include "spdlog/spdlog.h"

int main() 
{
    spdlog::info("Welcome to spdlog!");
    spdlog::error("Some error message with arg: {}", 1);
    
    spdlog::warn("Easy padding in numbers like {:08d}", 12);
    spdlog::critical("Support for int: {0:d};  hex: {0:x};  oct: {0:o}; bin: {0:b}", 42);
    spdlog::info("Support for floats {:03.2f}", 1.23456);
    spdlog::info("Positional args are {1} {0}..", "too", "supported");
    spdlog::info("{:<30}", "left aligned");
    
    spdlog::set_level(spdlog::level::debug); // Set global log level to debug
    spdlog::debug("This message should be displayed..");    
    
    // change log pattern
    spdlog::set_pattern("[%H:%M:%S %z] [%n] [%^---%L---%$] [thread %t] %v");
    
    // Compile time log levels
    // Note that this does not change the current log level, it will only
    // remove (depending on SPDLOG_ACTIVE_LEVEL) the call on the release code.
    SPDLOG_TRACE("Some trace message with param {}", 42);
    SPDLOG_DEBUG("Some debug message");
}

```
---
#### Create stdout/stderr logger object
```c++
#include "spdlog/spdlog.h"
#include "spdlog/sinks/stdout_color_sinks.h"
void stdout_example()
{
    // create a color multi-threaded logger
    auto console = spdlog::stdout_color_mt("console");    
    auto err_logger = spdlog::stderr_color_mt("stderr");    
    spdlog::get("console")->info("loggers can be retrieved from a global registry using the spdlog::get(logger_name)");
}
```

---
#### Basic file logger
```c++
#include "spdlog/sinks/basic_file_sink.h"
void basic_logfile_example()
{
    try 
    {
        auto logger = spdlog::basic_logger_mt("basic_logger", "logs/basic-log.txt");
    }
    catch (const spdlog::spdlog_ex &ex)
    {
        std::cout << "Log init failed: " << ex.what() << std::endl;
    }
}
```
---
#### Rotating files
```c++
#include "spdlog/sinks/rotating_file_sink.h"
void rotating_example()
{
    // Create a file rotating logger with 5 MB size max and 3 rotated files
    auto max_size = 1048576 * 5;
    auto max_files = 3;
    auto logger = spdlog::rotating_logger_mt("some_logger_name", "logs/rotating.txt", max_size, max_files);
}
```

---
#### Daily files
```c++

#include "spdlog/sinks/daily_file_sink.h"
void daily_example()
{
    // Create a daily logger - a new file is created every day at 2:30 am
    auto logger = spdlog::daily_logger_mt("daily_logger", "logs/daily.txt", 2, 30);
}

```

---
#### Backtrace support
```c++
// Debug messages can be stored in a ring buffer instead of being logged immediately.
// This is useful to display debug logs only when needed (e.g. when an error happens).
// When needed, call dump_backtrace() to dump them to your log.

spdlog::enable_backtrace(32); // Store the latest 32 messages in a buffer. 
// or my_logger->enable_backtrace(32)..
for(int i = 0; i < 100; i++)
{
  spdlog::debug("Backtrace message {}", i); // not logged yet..
}
// e.g. if some error happened:
spdlog::dump_backtrace(); // log them now! show the last 32 messages
// or my_logger->dump_backtrace(32)..
```

---
#### Periodic flush
```c++
// periodically flush all *registered* loggers every 3 seconds:
// warning: only use if all your loggers are thread-safe ("_mt" loggers)
spdlog::flush_every(std::chrono::seconds(3));

```

---
#### Stopwatch
```c++
// Stopwatch support for spdlog
#include "spdlog/stopwatch.h"
void stopwatch_example()
{
    spdlog::stopwatch sw;    
    spdlog::debug("Elapsed {}", sw);
    spdlog::debug("Elapsed {:.3}", sw);       
}

```

---
#### Log binary data in hex
```c++
// many types of std::container<char> types can be used.
// ranges are supported too.
// format flags:
// {:X} - print in uppercase.
// {:s} - don't separate each byte with space.
// {:p} - don't print the position on each line start.
// {:n} - don't split the output into lines.
// {:a} - show ASCII if :n is not set.

#include "spdlog/fmt/bin_to_hex.h"

void binary_example()
{
    auto console = spdlog::get("console");
    std::array<char, 80> buf;
    console->info("Binary example: {}", spdlog::to_hex(buf));
    console->info("Another binary example:{:n}", spdlog::to_hex(std::begin(buf), std::begin(buf) + 10));
    // more examples:
    // logger->info("uppercase: {:X}", spdlog::to_hex(buf));
    // logger->info("uppercase, no delimiters: {:Xs}", spdlog::to_hex(buf));
    // logger->info("uppercase, no delimiters, no position info: {:Xsp}", spdlog::to_hex(buf));
}

```

---
#### Logger with multi sinks - each with a different format and log level
```c++

// create a logger with 2 targets, with different log levels and formats.
// The console will show only warnings or errors, while the file will log all.
void multi_sink_example()
{
    auto console_sink = std::make_shared<spdlog::sinks::stdout_color_sink_mt>();
    console_sink->set_level(spdlog::level::warn);
    console_sink->set_pattern("[multi_sink_example] [%^%l%$] %v");

    auto file_sink = std::make_shared<spdlog::sinks::basic_file_sink_mt>("logs/multisink.txt", true);
    file_sink->set_level(spdlog::level::trace);

    spdlog::logger logger("multi_sink", {console_sink, file_sink});
    logger.set_level(spdlog::level::debug);
    logger.warn("this should appear in both console and file");
    logger.info("this message should not appear in the console, only in the file");
}
```

---
#### User-defined callbacks about log events
```c++

// create a logger with a lambda function callback, the callback will be called
// each time something is logged to the logger
void callback_example()
{
    auto callback_sink = std::make_shared<spdlog::sinks::callback_sink_mt>([](const spdlog::details::log_msg &msg) {
         // for example you can be notified by sending an email to yourself
    });
    callback_sink->set_level(spdlog::level::err);

    auto console_sink = std::make_shared<spdlog::sinks::stdout_color_sink_mt>();
    spdlog::logger logger("custom_callback_logger", {console_sink, callback_sink});

    logger.info("some info log");
    logger.error("critical issue"); // will notify you
}
```

---
#### Asynchronous logging
```c++
#include "spdlog/async.h"
#include "spdlog/sinks/basic_file_sink.h"
void async_example()
{
    // default thread pool settings can be modified *before* creating the async logger:
    // spdlog::init_thread_pool(8192, 1); // queue with 8k items and 1 backing thread.
    auto async_file = spdlog::basic_logger_mt<spdlog::async_factory>("async_file_logger", "logs/async_log.txt");
    // alternatively:
    // auto async_file = spdlog::create_async<spdlog::sinks::basic_file_sink_mt>("async_file_logger", "logs/async_log.txt");   
}

```

---
#### Asynchronous logger with multi sinks
```c++
#include "spdlog/async.h"
#include "spdlog/sinks/stdout_color_sinks.h"
#include "spdlog/sinks/rotating_file_sink.h"

void multi_sink_example2()
{
    spdlog::init_thread_pool(8192, 1);
    auto stdout_sink = std::make_shared<spdlog::sinks::stdout_color_sink_mt >();
    auto rotating_sink = std::make_shared<spdlog::sinks::rotating_file_sink_mt>("mylog.txt", 1024*1024*10, 3);
    std::vector<spdlog::sink_ptr> sinks {stdout_sink, rotating_sink};
    auto logger = std::make_shared<spdlog::async_logger>("loggername", sinks.begin(), sinks.end(), spdlog::thread_pool(), spdlog::async_overflow_policy::block);
    spdlog::register_logger(logger);
}
```
 
---
#### User-defined types
```c++
template<>
struct fmt::formatter<my_type> : fmt::formatter<std::string>
{
    auto format(my_type my, format_context &ctx) const -> decltype(ctx.out())
    {
        return fmt::format_to(ctx.out(), "[my_type i={}]", my.i);
    }
};

void user_defined_example()
{
    spdlog::info("user defined type: {}", my_type(14));
}

```

---
#### User-defined flags in the log pattern
```c++ 
// Log patterns can contain custom flags.
// the following example will add new flag '%*' - which will be bound to a <my_formatter_flag> instance.
#include "spdlog/pattern_formatter.h"
class my_formatter_flag : public spdlog::custom_flag_formatter
{
public:
    void format(const spdlog::details::log_msg &, const std::tm &, spdlog::memory_buf_t &dest) override
    {
        std::string some_txt = "custom-flag";
        dest.append(some_txt.data(), some_txt.data() + some_txt.size());
    }

    std::unique_ptr<custom_flag_formatter> clone() const override
    {
        return spdlog::details::make_unique<my_formatter_flag>();
    }
};

void custom_flags_example()
{    
    auto formatter = std::make_unique<spdlog::pattern_formatter>();
    formatter->add_flag<my_formatter_flag>('*').set_pattern("[%n] [%*] [%^%l%$] %v");
    spdlog::set_formatter(std::move(formatter));
}

```

---
#### Custom error handler
```c++
void err_handler_example()
{
    // can be set globally or per logger(logger->set_error_handler(..))
    spdlog::set_error_handler([](const std::string &msg) { spdlog::get("console")->error("*** LOGGER ERROR ***: {}", msg); });
    spdlog::get("console")->info("some invalid message to trigger an error {}{}{}{}", 3);
}

```

---
#### syslog
```c++
#include "spdlog/sinks/syslog_sink.h"
void syslog_example()
{
    std::string ident = "spdlog-example";
    auto syslog_logger = spdlog::syslog_logger_mt("syslog", ident, LOG_PID);
    syslog_logger->warn("This is warning that will end up in syslog.");
}
```
---
#### Android example
```c++
#include "spdlog/sinks/android_sink.h"
void android_example()
{
    std::string tag = "spdlog-android";
    auto android_logger = spdlog::android_logger_mt("android", tag);
    android_logger->critical("Use \"adb shell logcat\" to view this message.");
}
```

---
#### Load log levels from the env variable or argv

```c++
#include "spdlog/cfg/env.h"
int main (int argc, char *argv[])
{
    spdlog::cfg::load_env_levels();
    // or specify the env variable name:
    // MYAPP_LEVEL=info,mylogger=trace && ./example
    // spdlog::cfg::load_env_levels("MYAPP_LEVEL");
    // or from the command line:
    // ./example SPDLOG_LEVEL=info,mylogger=trace
    // #include "spdlog/cfg/argv.h" // for loading levels from argv
    // spdlog::cfg::load_argv_levels(argc, argv);
}
```
So then you can:

```console
$ export SPDLOG_LEVEL=info,mylogger=trace
$ ./example
```


---
#### Log file open/close event handlers
```c++
// You can get callbacks from spdlog before/after a log file has been opened or closed. 
// This is useful for cleanup procedures or for adding something to the start/end of the log file.
void file_events_example()
{
    // pass the spdlog::file_event_handlers to file sinks for open/close log file notifications
    spdlog::file_event_handlers handlers;
    handlers.before_open = [](spdlog::filename_t filename) { spdlog::info("Before opening {}", filename); };
    handlers.after_open = [](spdlog::filename_t filename, std::FILE *fstream) { fputs("After opening\n", fstream); };
    handlers.before_close = [](spdlog::filename_t filename, std::FILE *fstream) { fputs("Before closing\n", fstream); };
    handlers.after_close = [](spdlog::filename_t filename) { spdlog::info("After closing {}", filename); };
    auto my_logger = spdlog::basic_logger_st("some_logger", "logs/events-sample.txt", true, handlers);        
}
```

---
#### Replace the Default Logger
```c++
void replace_default_logger_example()
{
    auto new_logger = spdlog::basic_logger_mt("new_default_logger", "logs/new-default-log.txt", true);
    spdlog::set_default_logger(new_logger);
    spdlog::info("new logger log message");
}
```

---
#### Log to Qt with nice colors
```c++
#include "spdlog/spdlog.h"
#include "spdlog/sinks/qt_sinks.h"
MainWindow::MainWindow(QWidget *parent) : QMainWindow(parent)
{
    setMinimumSize(640, 480);
    auto log_widget = new QTextEdit(this);
    setCentralWidget(log_widget);
    int max_lines = 500; // keep the text widget to max 500 lines. remove old lines if needed.
    auto logger = spdlog::qt_color_logger_mt("qt_logger", log_widget, max_lines);
    logger->info("Some info message");
}
```
---

#### Mapped Diagnostic Context
```c++
// Mapped Diagnostic Context (MDC) is a map that stores key-value pairs (string values) in thread local storage.
// Each thread maintains its own MDC, which loggers use to append diagnostic information to log outputs.
// Note: it is not supported in asynchronous mode due to its reliance on thread-local storage.
#include "spdlog/mdc.h"
void mdc_example()
{
    spdlog::mdc::put("key1", "value1");
    spdlog::mdc::put("key2", "value2");
    // if not using the default format, use the %& formatter to print mdc data
    // spdlog::set_pattern("[%H:%M:%S %z] [%^%L%$] [%&] %v");
}
```
---
## Benchmarks

Below are some [benchmarks](bench/bench.cpp) done in Ubuntu 64 bit, Intel i7-4770 CPU @ 3.40GHz

#### Synchronous mode
```
[info] **************************************************************
[info] Single thread, 1,000,000 iterations
[info] **************************************************************
[info] basic_st         Elapsed: 0.17 secs        5,777,626/sec
[info] rotating_st      Elapsed: 0.18 secs        5,475,894/sec
[info] daily_st         Elapsed: 0.20 secs        5,062,659/sec
[info] empty_logger     Elapsed: 0.07 secs       14,127,300/sec
[info] **************************************************************
[info] C-string (400 bytes). Single thread, 1,000,000 iterations
[info] **************************************************************
[info] basic_st         Elapsed: 0.41 secs        2,412,483/sec
[info] rotating_st      Elapsed: 0.72 secs        1,389,196/sec
[info] daily_st         Elapsed: 0.42 secs        2,393,298/sec
[info] null_st          Elapsed: 0.04 secs       27,446,957/sec
[info] **************************************************************
[info] 10 threads, competing over the same logger object, 1,000,000 iterations
[info] **************************************************************
[info] basic_mt         Elapsed: 0.60 secs        1,659,613/sec
[info] rotating_mt      Elapsed: 0.62 secs        1,612,493/sec
[info] daily_mt         Elapsed: 0.61 secs        1,638,305/sec
[info] null_mt          Elapsed: 0.16 secs        6,272,758/sec
```
#### Asynchronous mode
```
[info] -------------------------------------------------
[info] Messages     : 1,000,000
[info] Threads      : 10
[info] Queue        : 8,192 slots
[info] Queue memory : 8,192 x 272 = 2,176 KB 
[info] -------------------------------------------------
[info] 
[info] *********************************
[info] Queue Overflow Policy: block
[info] *********************************
[info] Elapsed: 1.70784 secs     585,535/sec
[info] Elapsed: 1.69805 secs     588,910/sec
[info] Elapsed: 1.7026 secs      587,337/sec
[info] 
[info] *********************************
[info] Queue Overflow Policy: overrun
[info] *********************************
[info] Elapsed: 0.372816 secs    2,682,285/sec
[info] Elapsed: 0.379758 secs    2,633,255/sec
[info] Elapsed: 0.373532 secs    2,677,147/sec

```

## Documentation

Documentation can be found in the [wiki](https://github.com/gabime/spdlog/wiki) pages.

---

Thanks to [JetBrains](https://www.jetbrains.com/?from=spdlog) for donating product licenses to help develop **spdlog** <a href="https://www.jetbrains.com/?from=spdlog"><img src="logos/jetbrains-variant-4.svg" width="94" align="center" /></a>



2025-07-01 11:05:23.656 | DEBUG    | Analyzing file content. Try 1 of 3
2025-07-01 11:05:30.284 | INFO     | Model API request cost info: input_tokens=6236, output_tokens=353, cost=0.019120
2025-07-01 11:05:30.288 | SUCCESS  | Successfully extracted environment config
2025-07-01 11:05:30.288 | INFO     | ******
2025-07-01 11:05:30.289 | INFO     | Runtime Requirements:
- C++11 compiler (for header-only version)
- msvc 2013+ (for Windows)
- clang 3.5+ (for macOS)

Build Instructions:
- **Build System**: CMake
- **Command**:
    ```console
    git clone https://github.com/gabime/spdlog.git
    cd spdlog && mkdir build && cd build
    cmake .. && cmake --build .
    ```

Testing:
- **Test Framework**: No specific testing framework is explicitly mentioned in the `README.md` for running a test suite. However, a `bench/bench.cpp` file is referenced for benchmarks, implying a separate benchmark executable.
- **Environment Variables**: `SPDLOG_LEVEL` can be used to set log levels for tests/applications.
    - `export SPDLOG_LEVEL=info,mylogger=trace`
- **Command line arguments**: `SPDLOG_LEVEL` can also be passed as an argument.
    - `./example SPDLOG_LEVEL=info,mylogger=trace`

Libraries mentioned:
- fmt (for formatting)

Further notes for tests:
- The `README.md` primarily focuses on library usage and features. It doesn't explicitly detail how to *run* tests but provides information on building the library and mentions "benchmarks" and a `bench/bench.cpp` file. To run tests, one would typically look for a `CTest` integration or a specific test runner executable after building with CMake. The CI badges indicate tests are run on Linux, Windows, and macOS.
2025-07-01 11:05:30.289 | INFO     | ******
2025-07-01 11:05:30.290 | DEBUG    | Result of dispatch_intent: ('Runtime Requirements:\n- C++11 compiler (for header-only version)\n- msvc 2013+ (for Windows)\n- clang 3.5+ (for macOS)\n\nBuild Instructions:\n- **Build System**: CMake\n- **Command**:\n    ```console\n    git clone https://github.com/gabime/spdlog.git\n    cd spdlog && mkdir build && cd build\n    cmake .. && cmake --build .\n    ```\n\nTesting:\n- **Test Framework**: No specific testing framework is explicitly mentioned in the `README.md` for running a test suite. However, a `bench/bench.cpp` file is referenced for benchmarks, implying a separate benchmark executable.\n- **Environment Variables**: `SPDLOG_LEVEL` can be used to set log levels for tests/applications.\n    - `export SPDLOG_LEVEL=info,mylogger=trace`\n- **Command line arguments**: `SPDLOG_LEVEL` can also be passed as an argument.\n    - `./example SPDLOG_LEVEL=info,mylogger=trace`\n\nLibraries mentioned:\n- fmt (for formatting)\n\nFurther notes for tests:\n- The `README.md` primarily focuses on library usage and features. It doesn\'t explicitly detail how to *run* tests but provides information on building the library and mentions "benchmarks" and a `bench/bench.cpp` file. To run tests, one would typically look for a `CTest` integration or a specific test runner executable after building with CMake. The CI badges indicate tests are run on Linux, Windows, and macOS.', 'Get File Info', True)
2025-07-01 11:05:30.291 | INFO     | entering browse
2025-07-01 11:05:30.292 | INFO     | Header Only Version
==================================================================
Just copy the files to your build tree and use a C++11 compiler.  
Or use CMake:
``` 
  add_executable(example_header_only example.cpp)
  target_link_libraries(example_header_only spdlog::spdlog_header_only)
```

Compiled Library Version
==================================================================
CMake:
```  
  add_executable(example example.cpp)
  target_link_libraries(example spdlog::spdlog)
```

Or copy files src/*.cpp to your build tree and pass the -DSPDLOG_COMPILED_LIB to the compiler.

Important Information for Compilation:
==================================================================
* If you encounter compilation errors with gcc 4.8.x, please note that gcc 4.8.x does not fully support C++11. In such cases, consider upgrading your compiler or using a different version that fully supports C++11 standards

Tested on:  
gcc 4.8.1 and above
clang 3.5
Visual Studio 2013
2025-07-01 11:05:30.292 | DEBUG    | Analyzing file content. Try 1 of 3
2025-07-01 11:05:35.450 | INFO     | Model API request cost info: input_tokens=615, output_tokens=314, cost=0.004678
2025-07-01 11:05:35.454 | SUCCESS  | Successfully extracted environment config
2025-07-01 11:05:35.455 | INFO     | ******
2025-07-01 11:05:35.455 | INFO     | Installation and Build Instructions:

**Header-Only Version:**
*   **Installation:** Copy the project files to your build tree.
*   **Build System (CMake):**
    ```cmake
    add_executable(example_header_only example.cpp)
    target_link_libraries(example_header_only spdlog::spdlog_header_only)
    ```

**Compiled Library Version:**
*   **Installation Method 1 (CMake):**
    ```cmake
    add_executable(example example.cpp)
    target_link_libraries(example spdlog::spdlog)
    ```
*   **Installation Method 2 (Manual):** Copy `src/*.cpp` files to your build tree.
*   **Compilation Flag (Manual):** Pass `-DSPDLOG_COMPILED_LIB` to the compiler.

**Compiler Requirements & Dependencies:**
*   **Required Language Standard:** C++11.
*   **Recommended Compilers:**
    *   gcc 4.8.1 and above
    *   clang 3.5
    *   Visual Studio 2013
*   **Note on GCC 4.8.x:** Older versions of gcc 4.8.x may have incomplete C++11 support and might require a compiler upgrade.
*   **Build System Dependency:** CMake (recommended for both header-only and compiled library versions).
2025-07-01 11:05:35.456 | INFO     | ******
2025-07-01 11:05:35.457 | DEBUG    | Result of dispatch_intent: ('Installation and Build Instructions:\n\n**Header-Only Version:**\n*   **Installation:** Copy the project files to your build tree.\n*   **Build System (CMake):**\n    ```cmake\n    add_executable(example_header_only example.cpp)\n    target_link_libraries(example_header_only spdlog::spdlog_header_only)\n    ```\n\n**Compiled Library Version:**\n*   **Installation Method 1 (CMake):**\n    ```cmake\n    add_executable(example example.cpp)\n    target_link_libraries(example spdlog::spdlog)\n    ```\n*   **Installation Method 2 (Manual):** Copy `src/*.cpp` files to your build tree.\n*   **Compilation Flag (Manual):** Pass `-DSPDLOG_COMPILED_LIB` to the compiler.\n\n**Compiler Requirements & Dependencies:**\n*   **Required Language Standard:** C++11.\n*   **Recommended Compilers:**\n    *   gcc 4.8.1 and above\n    *   clang 3.5\n    *   Visual Studio 2013\n*   **Note on GCC 4.8.x:** Older versions of gcc 4.8.x may have incomplete C++11 support and might require a compiler upgrade.\n*   **Build System Dependency:** CMake (recommended for both header-only and compiled library versions).', 'Get File Info', True)
2025-07-01 11:05:35.458 | INFO     | entering browse
2025-07-01 11:05:35.459 | INFO     | # Copyright(c) 2019 spdlog authors Distributed under the MIT License (http://opensource.org/licenses/MIT)

cmake_minimum_required(VERSION 3.10...3.21)

# ---------------------------------------------------------------------------------------
# Start spdlog project
# ---------------------------------------------------------------------------------------
include(cmake/utils.cmake)
include(cmake/ide.cmake)

spdlog_extract_version()

project(spdlog VERSION ${SPDLOG_VERSION} LANGUAGES CXX)
message(STATUS "Build spdlog: ${SPDLOG_VERSION}")

include(GNUInstallDirs)

# ---------------------------------------------------------------------------------------
# Set default build to release
# ---------------------------------------------------------------------------------------
if(NOT CMAKE_BUILD_TYPE AND NOT CMAKE_CONFIGURATION_TYPES)
    set(CMAKE_BUILD_TYPE "Release" CACHE STRING "Choose Release or Debug" FORCE)
endif()

# ---------------------------------------------------------------------------------------
# Compiler config
# ---------------------------------------------------------------------------------------
if(SPDLOG_USE_STD_FORMAT)
    set(CMAKE_CXX_STANDARD 20)
    set(CMAKE_CXX_STANDARD_REQUIRED ON)
elseif(NOT CMAKE_CXX_STANDARD)
    set(CMAKE_CXX_STANDARD 11)
    set(CMAKE_CXX_STANDARD_REQUIRED ON)
endif()

set(CMAKE_CXX_EXTENSIONS OFF)

if(CMAKE_SYSTEM_NAME MATCHES "CYGWIN" OR CMAKE_SYSTEM_NAME MATCHES "MSYS" OR CMAKE_SYSTEM_NAME MATCHES "MINGW")
    set(CMAKE_CXX_EXTENSIONS ON)
endif()

# ---------------------------------------------------------------------------------------
# Set SPDLOG_MASTER_PROJECT to ON if we are building spdlog
# ---------------------------------------------------------------------------------------
# Check if spdlog is being used directly or via add_subdirectory, but allow overriding
if(NOT DEFINED SPDLOG_MASTER_PROJECT)
    if(CMAKE_CURRENT_SOURCE_DIR STREQUAL CMAKE_SOURCE_DIR)
        set(SPDLOG_MASTER_PROJECT ON)
    else()
        set(SPDLOG_MASTER_PROJECT OFF)
    endif()
endif()

option(SPDLOG_BUILD_ALL "Build all artifacts" OFF)

# build shared option
option(SPDLOG_BUILD_SHARED "Build shared library" OFF)

# precompiled headers option
option(SPDLOG_ENABLE_PCH "Build static or shared library using precompiled header to speed up compilation time" OFF)

# build position independent code
option(SPDLOG_BUILD_PIC "Build position independent code (-fPIC)" OFF)

# example options
option(SPDLOG_BUILD_EXAMPLE "Build example" ${SPDLOG_MASTER_PROJECT})
option(SPDLOG_BUILD_EXAMPLE_HO "Build header only example" OFF)

# testing options
option(SPDLOG_BUILD_TESTS "Build tests" OFF)
option(SPDLOG_BUILD_TESTS_HO "Build tests using the header only version" OFF)

# bench options
option(SPDLOG_BUILD_BENCH "Build benchmarks (Requires https://github.com/google/benchmark.git to be installed)" OFF)

# sanitizer options
option(SPDLOG_SANITIZE_ADDRESS "Enable address sanitizer in tests" OFF)
option(SPDLOG_SANITIZE_THREAD "Enable thread sanitizer in tests" OFF)
if(SPDLOG_SANITIZE_ADDRESS AND SPDLOG_SANITIZE_THREAD)
    message(FATAL_ERROR "SPDLOG_SANITIZE_ADDRESS and SPDLOG_SANITIZE_THREAD are mutually exclusive")
endif()

# warning options
option(SPDLOG_BUILD_WARNINGS "Enable compiler warnings" OFF)

# install options
option(SPDLOG_SYSTEM_INCLUDES "Include as system headers (skip for clang-tidy)." OFF)
option(SPDLOG_INSTALL "Generate the install target" ${SPDLOG_MASTER_PROJECT})
option(SPDLOG_USE_STD_FORMAT "Use std::format instead of fmt library." OFF)
option(SPDLOG_FMT_EXTERNAL "Use external fmt library instead of bundled" OFF)
option(SPDLOG_FMT_EXTERNAL_HO "Use external fmt header-only library instead of bundled" OFF)
option(SPDLOG_NO_EXCEPTIONS "Compile with -fno-exceptions. Call abort() on any spdlog exceptions" OFF)

if(SPDLOG_FMT_EXTERNAL AND SPDLOG_FMT_EXTERNAL_HO)
    message(FATAL_ERROR "SPDLOG_FMT_EXTERNAL and SPDLOG_FMT_EXTERNAL_HO are mutually exclusive")
endif()

if(SPDLOG_USE_STD_FORMAT AND SPDLOG_FMT_EXTERNAL_HO)
    message(FATAL_ERROR "SPDLOG_USE_STD_FORMAT and SPDLOG_FMT_EXTERNAL_HO are mutually exclusive")
endif()

if(SPDLOG_USE_STD_FORMAT AND SPDLOG_FMT_EXTERNAL)
    message(FATAL_ERROR "SPDLOG_USE_STD_FORMAT and SPDLOG_FMT_EXTERNAL are mutually exclusive")
endif()

# misc tweakme options
if(WIN32)
    option(SPDLOG_WCHAR_SUPPORT "Support wchar api" OFF)
    option(SPDLOG_WCHAR_FILENAMES "Support wchar filenames" OFF)
    option(SPDLOG_WCHAR_CONSOLE "Support wchar output to console" OFF)
else()
    set(SPDLOG_WCHAR_SUPPORT OFF CACHE BOOL "non supported option" FORCE)
    set(SPDLOG_WCHAR_FILENAMES OFF CACHE BOOL "non supported option" FORCE)
    set(SPDLOG_WCHAR_CONSOLE OFF CACHE BOOL "non supported option" FORCE)
endif()

if(MSVC)
    option(SPDLOG_MSVC_UTF8 "Enable/disable msvc /utf-8 flag required by fmt lib" ON)
endif()

if(${CMAKE_SYSTEM_NAME} STREQUAL "Linux")
    option(SPDLOG_CLOCK_COARSE "Use CLOCK_REALTIME_COARSE instead of the regular clock," OFF)
else()
    set(SPDLOG_CLOCK_COARSE OFF CACHE BOOL "non supported option" FORCE)
endif()

option(SPDLOG_PREVENT_CHILD_FD "Prevent from child processes to inherit log file descriptors" OFF)
option(SPDLOG_NO_THREAD_ID "prevent spdlog from querying the thread id on each log call if thread id is not needed" OFF)
option(SPDLOG_NO_TLS "prevent spdlog from using thread local storage" OFF)
option(
    SPDLOG_NO_ATOMIC_LEVELS
    "prevent spdlog from using of std::atomic log levels (use only if your code never modifies log levels concurrently"
    OFF)
option(SPDLOG_DISABLE_DEFAULT_LOGGER "Disable default logger creation" OFF)
option(SPDLOG_FWRITE_UNLOCKED "Use the unlocked variant of fwrite. Leave this on unless your libc doesn't have it" ON)

# clang-tidy
option(SPDLOG_TIDY "run clang-tidy" OFF)

if(SPDLOG_TIDY)
    set(CMAKE_CXX_CLANG_TIDY "clang-tidy")
    set(CMAKE_EXPORT_COMPILE_COMMANDS ON)
    message(STATUS "Enabled clang-tidy")
endif()

if(SPDLOG_BUILD_PIC)
    set(CMAKE_POSITION_INDEPENDENT_CODE ON)
endif()

find_package(Threads REQUIRED)
message(STATUS "Build type: " ${CMAKE_BUILD_TYPE})
# ---------------------------------------------------------------------------------------
# Static/Shared library
# ---------------------------------------------------------------------------------------
set(SPDLOG_SRCS src/spdlog.cpp src/stdout_sinks.cpp src/color_sinks.cpp src/file_sinks.cpp src/async.cpp src/cfg.cpp)

if(NOT SPDLOG_USE_STD_FORMAT AND NOT SPDLOG_FMT_EXTERNAL AND NOT SPDLOG_FMT_EXTERNAL_HO)
    list(APPEND SPDLOG_SRCS src/bundled_fmtlib_format.cpp)
endif()

if(SPDLOG_BUILD_SHARED OR BUILD_SHARED_LIBS)
    if(WIN32)
        configure_file(${CMAKE_CURRENT_SOURCE_DIR}/cmake/version.rc.in ${CMAKE_CURRENT_BINARY_DIR}/version.rc @ONLY)
        list(APPEND SPDLOG_SRCS ${CMAKE_CURRENT_BINARY_DIR}/version.rc)
    endif()
    add_library(spdlog SHARED ${SPDLOG_SRCS} ${SPDLOG_ALL_HEADERS})
    target_compile_definitions(spdlog PUBLIC SPDLOG_SHARED_LIB)
    if(CMAKE_CXX_COMPILER_ID STREQUAL "MSVC")
        target_compile_options(spdlog PUBLIC $<$<AND:$<CXX_COMPILER_ID:MSVC>,$<NOT:$<COMPILE_LANGUAGE:CUDA>>>:/wd4251
                                             /wd4275>)
    endif()
    if(NOT SPDLOG_USE_STD_FORMAT AND NOT SPDLOG_FMT_EXTERNAL AND NOT SPDLOG_FMT_EXTERNAL_HO)
        target_compile_definitions(spdlog PRIVATE FMT_LIB_EXPORT PUBLIC FMT_SHARED)
    endif()
else()
    add_library(spdlog STATIC ${SPDLOG_SRCS} ${SPDLOG_ALL_HEADERS})
endif()

add_library(spdlog::spdlog ALIAS spdlog)

set(SPDLOG_INCLUDES_LEVEL "")
if(SPDLOG_SYSTEM_INCLUDES)
    set(SPDLOG_INCLUDES_LEVEL "SYSTEM")
endif()

target_compile_definitions(spdlog PUBLIC SPDLOG_COMPILED_LIB)
target_include_directories(spdlog ${SPDLOG_INCLUDES_LEVEL} PUBLIC "$<BUILD_INTERFACE:${CMAKE_CURRENT_LIST_DIR}/include>"
                                                                  "$<INSTALL_INTERFACE:${CMAKE_INSTALL_INCLUDEDIR}>")
target_link_libraries(spdlog PUBLIC Threads::Threads)
spdlog_enable_warnings(spdlog)

set_target_properties(spdlog PROPERTIES VERSION ${SPDLOG_VERSION} SOVERSION
                                                                  ${SPDLOG_VERSION_MAJOR}.${SPDLOG_VERSION_MINOR})
set_target_properties(spdlog PROPERTIES DEBUG_POSTFIX d)

if(COMMAND target_precompile_headers AND SPDLOG_ENABLE_PCH)
    configure_file(${CMAKE_CURRENT_SOURCE_DIR}/cmake/pch.h.in ${PROJECT_BINARY_DIR}/spdlog_pch.h @ONLY)
    target_precompile_headers(spdlog PRIVATE ${PROJECT_BINARY_DIR}/spdlog_pch.h)
endif()

# sanitizer support
if(SPDLOG_SANITIZE_ADDRESS)
    spdlog_enable_addr_sanitizer(spdlog)
elseif(SPDLOG_SANITIZE_THREAD)
    spdlog_enable_thread_sanitizer(spdlog)
endif()

# ---------------------------------------------------------------------------------------
# Header only version
# ---------------------------------------------------------------------------------------
add_library(spdlog_header_only INTERFACE)
add_library(spdlog::spdlog_header_only ALIAS spdlog_header_only)

target_include_directories(
    spdlog_header_only ${SPDLOG_INCLUDES_LEVEL} INTERFACE "$<BUILD_INTERFACE:${CMAKE_CURRENT_LIST_DIR}/include>"
                                                          "$<INSTALL_INTERFACE:${CMAKE_INSTALL_INCLUDEDIR}>")
target_link_libraries(spdlog_header_only INTERFACE Threads::Threads)

# ---------------------------------------------------------------------------------------
# Use fmt package if using external fmt
# ---------------------------------------------------------------------------------------
if(SPDLOG_FMT_EXTERNAL OR SPDLOG_FMT_EXTERNAL_HO)
    if(NOT TARGET fmt::fmt)
        find_package(fmt CONFIG REQUIRED)
    endif()
    target_compile_definitions(spdlog PUBLIC SPDLOG_FMT_EXTERNAL)
    target_compile_definitions(spdlog_header_only INTERFACE SPDLOG_FMT_EXTERNAL)

    # use external fmt-header-only
    if(SPDLOG_FMT_EXTERNAL_HO)
        target_link_libraries(spdlog PUBLIC fmt::fmt-header-only)
        target_link_libraries(spdlog_header_only INTERFACE fmt::fmt-header-only)
    else() # use external compile fmt
        target_link_libraries(spdlog PUBLIC fmt::fmt)
        target_link_libraries(spdlog_header_only INTERFACE fmt::fmt)
    endif()

    set(PKG_CONFIG_REQUIRES fmt) # add dependency to pkg-config
endif()

# ---------------------------------------------------------------------------------------
# Check if fwrite_unlocked/_fwrite_nolock is available
# ---------------------------------------------------------------------------------------
if(SPDLOG_FWRITE_UNLOCKED)
    include(CheckSymbolExists)
    if(WIN32)
        check_symbol_exists(_fwrite_nolock "stdio.h" HAVE_FWRITE_UNLOCKED)
    else()
        check_symbol_exists(fwrite_unlocked "stdio.h" HAVE_FWRITE_UNLOCKED)
    endif()
    if(HAVE_FWRITE_UNLOCKED)
        target_compile_definitions(spdlog PRIVATE SPDLOG_FWRITE_UNLOCKED)
        target_compile_definitions(spdlog_header_only INTERFACE SPDLOG_FWRITE_UNLOCKED)
    endif()
endif()

# ---------------------------------------------------------------------------------------
# Add required libraries for Android CMake build
# ---------------------------------------------------------------------------------------
if(ANDROID)
    target_link_libraries(spdlog PUBLIC log)
    target_link_libraries(spdlog_header_only INTERFACE log)
endif()

# ---------------------------------------------------------------------------------------
# Misc definitions according to tweak options
# ---------------------------------------------------------------------------------------
set(SPDLOG_WCHAR_TO_UTF8_SUPPORT ${SPDLOG_WCHAR_SUPPORT})
set(SPDLOG_UTF8_TO_WCHAR_CONSOLE ${SPDLOG_WCHAR_CONSOLE})
foreach(
    SPDLOG_OPTION
    SPDLOG_WCHAR_TO_UTF8_SUPPORT
    SPDLOG_UTF8_TO_WCHAR_CONSOLE
    SPDLOG_WCHAR_FILENAMES
    SPDLOG_NO_EXCEPTIONS
    SPDLOG_CLOCK_COARSE
    SPDLOG_PREVENT_CHILD_FD
    SPDLOG_NO_THREAD_ID
    SPDLOG_NO_TLS
    SPDLOG_NO_ATOMIC_LEVELS
    SPDLOG_DISABLE_DEFAULT_LOGGER
    SPDLOG_USE_STD_FORMAT)
    if(${SPDLOG_OPTION})
        target_compile_definitions(spdlog PUBLIC ${SPDLOG_OPTION})
        target_compile_definitions(spdlog_header_only INTERFACE ${SPDLOG_OPTION})
    endif()
endforeach()

if(MSVC)
    target_compile_options(spdlog PRIVATE "/Zc:__cplusplus")
    target_compile_options(spdlog_header_only INTERFACE "/Zc:__cplusplus")
    if(SPDLOG_MSVC_UTF8)
        # fmtlib requires the /utf-8 flag when building with msvc. see https://github.com/fmtlib/fmt/pull/4159 on the
        # purpose of the additional
        # "$<$<AND:$<COMPILE_LANGUAGE:CXX>,$<CXX_COMPILER_ID:MSVC>>"
        target_compile_options(spdlog PUBLIC $<$<AND:$<COMPILE_LANGUAGE:CXX>,$<CXX_COMPILER_ID:MSVC>>:/utf-8>)
        target_compile_options(spdlog_header_only
                               INTERFACE $<$<AND:$<COMPILE_LANGUAGE:CXX>,$<CXX_COMPILER_ID:MSVC>>:/utf-8>)
    endif()
endif()

# ---------------------------------------------------------------------------------------
# If exceptions are disabled, disable them in the bundled fmt as well
# ---------------------------------------------------------------------------------------
if(SPDLOG_NO_EXCEPTIONS)
    if(NOT SPDLOG_FMT_EXTERNAL AND NOT SPDLOG_FMT_EXTERNAL_HO)
        target_compile_definitions(spdlog PUBLIC FMT_USE_EXCEPTIONS=0)
    endif()
    if(NOT MSVC)
        target_compile_options(spdlog PRIVATE -fno-exceptions)
    else()
        target_compile_options(spdlog PRIVATE /EHs-c-)
        target_compile_definitions(spdlog PRIVATE _HAS_EXCEPTIONS=0)
    endif()
endif()
# ---------------------------------------------------------------------------------------
# Build binaries
# ---------------------------------------------------------------------------------------
if(SPDLOG_BUILD_EXAMPLE OR SPDLOG_BUILD_EXAMPLE_HO OR SPDLOG_BUILD_ALL)
    message(STATUS "Generating example(s)")
    add_subdirectory(example)
    spdlog_enable_warnings(example)
    if(SPDLOG_BUILD_EXAMPLE_HO)
        spdlog_enable_warnings(example_header_only)
    endif()
endif()

if(SPDLOG_BUILD_TESTS OR SPDLOG_BUILD_TESTS_HO OR SPDLOG_BUILD_ALL)
    message(STATUS "Generating tests")
    enable_testing()
    add_subdirectory(tests)
endif()

if(SPDLOG_BUILD_BENCH OR SPDLOG_BUILD_ALL)
    message(STATUS "Generating benchmarks")
    add_subdirectory(bench)
endif()

# ---------------------------------------------------------------------------------------
# Install
# ---------------------------------------------------------------------------------------
if(SPDLOG_INSTALL)
    message(STATUS "Generating install")
    set(project_config_in "${CMAKE_CURRENT_LIST_DIR}/cmake/spdlogConfig.cmake.in")
    set(project_config_out "${CMAKE_CURRENT_BINARY_DIR}/spdlogConfig.cmake")
    set(config_targets_file "spdlogConfigTargets.cmake")
    set(version_config_file "${CMAKE_CURRENT_BINARY_DIR}/spdlogConfigVersion.cmake")
    set(export_dest_dir "${CMAKE_INSTALL_LIBDIR}/cmake/spdlog")
    set(pkgconfig_install_dir "${CMAKE_INSTALL_LIBDIR}/pkgconfig")
    set(pkg_config "${CMAKE_BINARY_DIR}/${PROJECT_NAME}.pc")

    # ---------------------------------------------------------------------------------------
    # Include files
    # ---------------------------------------------------------------------------------------
    install(DIRECTORY include/ DESTINATION "${CMAKE_INSTALL_INCLUDEDIR}" PATTERN "fmt/bundled" EXCLUDE)
    install(
        TARGETS spdlog spdlog_header_only
        EXPORT spdlog
        LIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR}
        ARCHIVE DESTINATION ${CMAKE_INSTALL_LIBDIR}
        RUNTIME DESTINATION ${CMAKE_INSTALL_BINDIR})

    if(NOT SPDLOG_USE_STD_FORMAT AND NOT SPDLOG_FMT_EXTERNAL AND NOT SPDLOG_FMT_EXTERNAL_HO)
        install(DIRECTORY include/${PROJECT_NAME}/fmt/bundled/
                DESTINATION "${CMAKE_INSTALL_INCLUDEDIR}/${PROJECT_NAME}/fmt/bundled/")
    endif()

    # ---------------------------------------------------------------------------------------
    # Install pkg-config file
    # ---------------------------------------------------------------------------------------
    if(IS_ABSOLUTE "${CMAKE_INSTALL_INCLUDEDIR}")
        set(PKG_CONFIG_INCLUDEDIR "${CMAKE_INSTALL_INCLUDEDIR}")
    else()
        set(PKG_CONFIG_INCLUDEDIR "\${prefix}/${CMAKE_INSTALL_INCLUDEDIR}")
    endif()
    if(IS_ABSOLUTE "${CMAKE_INSTALL_LIBDIR}")
        set(PKG_CONFIG_LIBDIR "${CMAKE_INSTALL_LIBDIR}")
    else()
        set(PKG_CONFIG_LIBDIR "\${exec_prefix}/${CMAKE_INSTALL_LIBDIR}")
    endif()
    get_target_property(PKG_CONFIG_DEFINES spdlog INTERFACE_COMPILE_DEFINITIONS)
    string(REPLACE ";" " -D" PKG_CONFIG_DEFINES "${PKG_CONFIG_DEFINES}")
    string(CONCAT PKG_CONFIG_DEFINES "-D" "${PKG_CONFIG_DEFINES}")
    configure_file("cmake/${PROJECT_NAME}.pc.in" "${pkg_config}" @ONLY)
    install(FILES "${pkg_config}" DESTINATION "${pkgconfig_install_dir}")

    # ---------------------------------------------------------------------------------------
    # Install CMake config files
    # ---------------------------------------------------------------------------------------
    export(TARGETS spdlog spdlog_header_only NAMESPACE spdlog::
           FILE "${CMAKE_CURRENT_BINARY_DIR}/${config_targets_file}")
    install(EXPORT spdlog DESTINATION ${export_dest_dir} NAMESPACE spdlog:: FILE ${config_targets_file})

    include(CMakePackageConfigHelpers)
    configure_package_config_file("${project_config_in}" "${project_config_out}" INSTALL_DESTINATION ${export_dest_dir})

    write_basic_package_version_file("${version_config_file}" COMPATIBILITY SameMajorVersion)
    install(FILES "${project_config_out}" "${version_config_file}" DESTINATION "${export_dest_dir}")

    # ---------------------------------------------------------------------------------------
    # Support creation of installable packages
    # ---------------------------------------------------------------------------------------
    include(cmake/spdlogCPack.cmake)
endif()

2025-07-01 11:05:35.460 | DEBUG    | Analyzing file content. Try 1 of 3
2025-07-01 11:05:40.935 | INFO     | Model API request cost info: input_tokens=5260, output_tokens=363, cost=0.016780
2025-07-01 11:05:40.938 | SUCCESS  | Successfully extracted environment config
2025-07-01 11:05:40.939 | INFO     | ******
2025-07-01 11:05:40.939 | INFO     | CMake Project Configuration:
- Project Name: spdlog
- Minimum CMake Version: 3.10
- Languages: CXX
- Default Build Type: Release
- C++ Standard: C++11 (default), C++20 (if `SPDLOG_USE_STD_FORMAT` is ON)

Required Dependencies:
- Threads (found via `find_package(Threads REQUIRED)`)
- fmt library (used internally as bundled, or externally if `SPDLOG_FMT_EXTERNAL` or `SPDLOG_FMT_EXTERNAL_HO` is ON)
- google/benchmark.git (for benchmarks, if `SPDLOG_BUILD_BENCH` is ON)
- log (for Android builds)

Test Setup:
- Option to build tests: `SPDLOG_BUILD_TESTS` (OFF by default)
- Option to build header-only tests: `SPDLOG_BUILD_TESTS_HO` (OFF by default)
- Test framework: Based on `enable_testing()` and `add_subdirectory(tests)`, it implies CTest is used with tests defined in the `tests` subdirectory.
- Sanitizers:
    - Address Sanitizer: `SPDLOG_SANITIZE_ADDRESS` (OFF by default)
    - Thread Sanitizer: `SPDLOG_SANITIZE_THREAD` (OFF by default)
    - Note: These are mutually exclusive.
- Test Command: The file sets up the build system to generate tests, but the exact command to run tests (e.g., `ctest`) is not explicitly stated within this `CMakeLists.txt`. It would typically be `ctest` after building the project.
2025-07-01 11:05:40.940 | INFO     | ******
2025-07-01 11:05:40.940 | DEBUG    | Result of dispatch_intent: ('CMake Project Configuration:\n- Project Name: spdlog\n- Minimum CMake Version: 3.10\n- Languages: CXX\n- Default Build Type: Release\n- C++ Standard: C++11 (default), C++20 (if `SPDLOG_USE_STD_FORMAT` is ON)\n\nRequired Dependencies:\n- Threads (found via `find_package(Threads REQUIRED)`)\n- fmt library (used internally as bundled, or externally if `SPDLOG_FMT_EXTERNAL` or `SPDLOG_FMT_EXTERNAL_HO` is ON)\n- google/benchmark.git (for benchmarks, if `SPDLOG_BUILD_BENCH` is ON)\n- log (for Android builds)\n\nTest Setup:\n- Option to build tests: `SPDLOG_BUILD_TESTS` (OFF by default)\n- Option to build header-only tests: `SPDLOG_BUILD_TESTS_HO` (OFF by default)\n- Test framework: Based on `enable_testing()` and `add_subdirectory(tests)`, it implies CTest is used with tests defined in the `tests` subdirectory.\n- Sanitizers:\n    - Address Sanitizer: `SPDLOG_SANITIZE_ADDRESS` (OFF by default)\n    - Thread Sanitizer: `SPDLOG_SANITIZE_THREAD` (OFF by default)\n    - Note: These are mutually exclusive.\n- Test Command: The file sets up the build system to generate tests, but the exact command to run tests (e.g., `ctest`) is not explicitly stated within this `CMakeLists.txt`. It would typically be `ctest` after building the project.', 'Get File Info', True)
2025-07-01 11:05:40.942 | INFO     | entering browse
2025-07-01 11:05:40.942 | INFO     | version: 1.0.{build}
image: Visual Studio 2017
environment:
  matrix:
    - GENERATOR: '"Visual Studio 15 2017 Win64"'
      BUILD_TYPE: Debug
      BUILD_SHARED: 'OFF'
      FATAL_ERRORS: 'OFF'
      WCHAR: 'ON'
      WCHAR_FILES: 'OFF'
      BUILD_EXAMPLE: 'ON'
      USE_STD_FORMAT: 'OFF'
      CXX_STANDARD: 11
    - GENERATOR: '"Visual Studio 15 2017 Win64"'
      BUILD_TYPE: Release
      BUILD_SHARED: 'OFF'
      FATAL_ERRORS: 'OFF'
      WCHAR: 'OFF'
      WCHAR_FILES: 'OFF'
      BUILD_EXAMPLE: 'ON'
      USE_STD_FORMAT: 'OFF'
      CXX_STANDARD: 11
    - GENERATOR: '"Visual Studio 15 2017 Win64"'
      BUILD_TYPE: Release
      BUILD_SHARED: 'ON'
      FATAL_ERRORS: 'OFF'
      WCHAR: 'OFF'
      WCHAR_FILES: 'OFF'
      BUILD_EXAMPLE: 'ON'
      USE_STD_FORMAT: 'OFF'
      CXX_STANDARD: 11
    - GENERATOR: '"Visual Studio 15 2017 Win64"'
      BUILD_TYPE: Release
      BUILD_SHARED: 'ON'
      FATAL_ERRORS: 'OFF'
      WCHAR: 'ON'
      WCHAR_FILES: 'ON'
      BUILD_EXAMPLE: 'OFF'
      USE_STD_FORMAT: 'OFF'
      CXX_STANDARD: 11
    - GENERATOR: '"Visual Studio 16 2019" -A x64'
      BUILD_TYPE: Release
      BUILD_SHARED: 'ON'
      FATAL_ERRORS: 'ON'
      WCHAR: 'OFF'
      WCHAR_FILES: 'OFF'
      BUILD_EXAMPLE: 'OFF'
      USE_STD_FORMAT: 'OFF'
      CXX_STANDARD: 17
      APPVEYOR_BUILD_WORKER_IMAGE: Visual Studio 2019
    - GENERATOR: '"Visual Studio 17 2022" -A x64'
      BUILD_TYPE: Release
      BUILD_SHARED: 'ON'
      FATAL_ERRORS: 'ON'
      WCHAR: 'OFF'
      WCHAR_FILES: 'OFF'
      BUILD_EXAMPLE: 'OFF'
      USE_STD_FORMAT: 'ON'
      CXX_STANDARD: 20
      APPVEYOR_BUILD_WORKER_IMAGE: Visual Studio 2022
    - GENERATOR: '"Visual Studio 17 2022" -A x64'
      BUILD_TYPE: Release
      BUILD_SHARED: 'ON'
      FATAL_ERRORS: 'ON'
      WCHAR: 'ON'
      WCHAR_FILES: 'ON'
      BUILD_EXAMPLE: 'OFF'
      USE_STD_FORMAT: 'ON'
      CXX_STANDARD: 20
      APPVEYOR_BUILD_WORKER_IMAGE: Visual Studio 2022
build_script:
  - cmd: >-
      set

      mkdir build

      cd build

      set PATH=%PATH%;C:\Program Files\Git\usr\bin

      cmake -G %GENERATOR% -D CMAKE_BUILD_TYPE=%BUILD_TYPE% -D BUILD_SHARED_LIBS=%BUILD_SHARED% -D SPDLOG_WCHAR_SUPPORT=%WCHAR% -D SPDLOG_WCHAR_FILENAMES=%WCHAR_FILES% -D SPDLOG_BUILD_EXAMPLE=%BUILD_EXAMPLE% -D SPDLOG_BUILD_EXAMPLE_HO=%BUILD_EXAMPLE% -D SPDLOG_BUILD_TESTS=ON -D SPDLOG_BUILD_TESTS_HO=OFF -D SPDLOG_BUILD_WARNINGS=%FATAL_ERRORS% -D SPDLOG_USE_STD_FORMAT=%USE_STD_FORMAT% -D CMAKE_CXX_STANDARD=%CXX_STANDARD% ..

      cmake --build . --config %BUILD_TYPE%

before_test:
  - set PATH=%PATH%;C:\projects\spdlog\build\_deps\catch2-build\src\%BUILD_TYPE%;C:\projects\spdlog\build\%BUILD_TYPE%
  
test_script:
  - C:\projects\spdlog\build\tests\%BUILD_TYPE%\spdlog-utests.exe

2025-07-01 11:05:40.943 | DEBUG    | Analyzing file content. Try 1 of 3
2025-07-01 11:05:46.861 | INFO     | Model API request cost info: input_tokens=1413, output_tokens=674, cost=0.010273
2025-07-01 11:05:46.864 | SUCCESS  | Successfully extracted environment config
2025-07-01 11:05:46.865 | INFO     | ******
2025-07-01 11:05:46.865 | INFO     | Runtime Requirements:
- Operating System: Windows
- Build Environments:
    - Visual Studio 2017
    - Visual Studio 2019
    - Visual Studio 2022
- Tools: CMake, Git (specifically `C:\Program Files\Git\usr\bin` for `set PATH=%PATH%;C:\Program Files\Git\usr\bin`)

Key environment variables:
- `GENERATOR`: Varies for Visual Studio versions and architectures (e.g., `"Visual Studio 15 2017 Win64"`, `"Visual Studio 16 2019" -A x64`, `"Visual Studio 17 2022" -A x64`)
- `BUILD_TYPE`: Debug, Release
- `BUILD_SHARED`: OFF, ON
- `FATAL_ERRORS`: OFF, ON
- `WCHAR`: OFF, ON
- `WCHAR_FILES`: OFF, ON
- `BUILD_EXAMPLE`: OFF, ON
- `USE_STD_FORMAT`: OFF, ON
- `CXX_STANDARD`: 11, 17, 20
- `APPVEYOR_BUILD_WORKER_IMAGE`: Visual Studio 2019, Visual Studio 2022 (overrides default `image` for specific matrix entries)

CI/CD Build Steps:
- Environment Setup:
    - `set` (displays current environment variables)
    - `mkdir build` (creates build directory)
    - `cd build` (changes current directory to `build`)
    - `set PATH=%PATH%;C:\Program Files\Git\usr\bin` (adds Git's bin directory to PATH)
- Configuration (CMake):
    - `cmake -G %GENERATOR% -D CMAKE_BUILD_TYPE=%BUILD_TYPE% -D BUILD_SHARED_LIBS=%BUILD_SHARED% -D SPDLOG_WCHAR_SUPPORT=%WCHAR% -D SPDLOG_WCHAR_FILENAMES=%WCHAR_FILES% -D SPDLOG_BUILD_EXAMPLE=%BUILD_EXAMPLE% -D SPDLOG_BUILD_EXAMPLE_HO=%BUILD_EXAMPLE% -D SPDLOG_BUILD_TESTS=ON -D SPDLOG_BUILD_TESTS_HO=OFF -D SPDLOG_BUILD_WARNINGS=%FATAL_ERRORS% -D SPDLOG_USE_STD_FORMAT=%USE_STD_FORMAT% -D CMAKE_CXX_STANDARD=%CXX_STANDARD% ..`
- Build (CMake):
    - `cmake --build . --config %BUILD_TYPE%`

CI/CD Test Steps:
- Environment Setup (before test):
    - `set PATH=%PATH%;C:\projects\spdlog\build\_deps\catch2-build\src\%BUILD_TYPE%;C:\projects\spdlog\build\%BUILD_TYPE%` (adds paths for Catch2 and built libraries to PATH)
- Test Command:
    - `C:\projects\spdlog\build\tests\%BUILD_TYPE%\spdlog-utests.exe`
2025-07-01 11:05:46.865 | INFO     | ******
2025-07-01 11:05:46.866 | DEBUG    | Result of dispatch_intent: ('Runtime Requirements:\n- Operating System: Windows\n- Build Environments:\n    - Visual Studio 2017\n    - Visual Studio 2019\n    - Visual Studio 2022\n- Tools: CMake, Git (specifically `C:\\Program Files\\Git\\usr\\bin` for `set PATH=%PATH%;C:\\Program Files\\Git\\usr\\bin`)\n\nKey environment variables:\n- `GENERATOR`: Varies for Visual Studio versions and architectures (e.g., `"Visual Studio 15 2017 Win64"`, `"Visual Studio 16 2019" -A x64`, `"Visual Studio 17 2022" -A x64`)\n- `BUILD_TYPE`: Debug, Release\n- `BUILD_SHARED`: OFF, ON\n- `FATAL_ERRORS`: OFF, ON\n- `WCHAR`: OFF, ON\n- `WCHAR_FILES`: OFF, ON\n- `BUILD_EXAMPLE`: OFF, ON\n- `USE_STD_FORMAT`: OFF, ON\n- `CXX_STANDARD`: 11, 17, 20\n- `APPVEYOR_BUILD_WORKER_IMAGE`: Visual Studio 2019, Visual Studio 2022 (overrides default `image` for specific matrix entries)\n\nCI/CD Build Steps:\n- Environment Setup:\n    - `set` (displays current environment variables)\n    - `mkdir build` (creates build directory)\n    - `cd build` (changes current directory to `build`)\n    - `set PATH=%PATH%;C:\\Program Files\\Git\\usr\\bin` (adds Git\'s bin directory to PATH)\n- Configuration (CMake):\n    - `cmake -G %GENERATOR% -D CMAKE_BUILD_TYPE=%BUILD_TYPE% -D BUILD_SHARED_LIBS=%BUILD_SHARED% -D SPDLOG_WCHAR_SUPPORT=%WCHAR% -D SPDLOG_WCHAR_FILENAMES=%WCHAR_FILES% -D SPDLOG_BUILD_EXAMPLE=%BUILD_EXAMPLE% -D SPDLOG_BUILD_EXAMPLE_HO=%BUILD_EXAMPLE% -D SPDLOG_BUILD_TESTS=ON -D SPDLOG_BUILD_TESTS_HO=OFF -D SPDLOG_BUILD_WARNINGS=%FATAL_ERRORS% -D SPDLOG_USE_STD_FORMAT=%USE_STD_FORMAT% -D CMAKE_CXX_STANDARD=%CXX_STANDARD% ..`\n- Build (CMake):\n    - `cmake --build . --config %BUILD_TYPE%`\n\nCI/CD Test Steps:\n- Environment Setup (before test):\n    - `set PATH=%PATH%;C:\\projects\\spdlog\\build\\_deps\\catch2-build\\src\\%BUILD_TYPE%;C:\\projects\\spdlog\\build\\%BUILD_TYPE%` (adds paths for Catch2 and built libraries to PATH)\n- Test Command:\n    - `C:\\projects\\spdlog\\build\\tests\\%BUILD_TYPE%\\spdlog-utests.exe`', 'Get File Info', True)
2025-07-01 11:05:46.867 | DEBUG    | Result of dispatch_intent: ('You are browsing the path: /home/taimoor/Skylabs/swe-factory-local/testbed/gabime__spdlog-3398_2025-07-01_10-49-28/tests. The browsing Depth is 1.\nStructure of this path:\n\nCMakeLists.txt\n\nincludes.h\n\nmain.cpp\n\ntest_async.cpp\n\ntest_backtrace.cpp\n\ntest_bin_to_hex.cpp\n\ntest_cfg.cpp\n\ntest_circular_q.cpp\n\ntest_create_dir.cpp\n\ntest_custom_callbacks.cpp\n\ntest_daily_logger.cpp\n\ntest_dup_filter.cpp\n\ntest_errors.cpp\n\ntest_eventlog.cpp\n\ntest_file_helper.cpp\n\ntest_file_logging.cpp\n\ntest_fmt_helper.cpp\n\ntest_macros.cpp\n\ntest_misc.cpp\n\ntest_mpmc_q.cpp\n\ntest_pattern_formatter.cpp\n\ntest_sink.h\n\ntest_stdout_api.cpp\n\ntest_systemd.cpp\n\ntest_time_point.cpp\n\nutils.cpp\n\nutils.h\n\ntest_registry.cpp\n\ntest_stopwatch.cpp\n\n', 'folder structure collected', True)
2025-07-01 11:06:07.832 | INFO     | Model API request cost info: input_tokens=3486, output_tokens=1058, cost=0.019295
2025-07-01 11:06:13.976 | INFO     | Model API request cost info: input_tokens=4643, output_tokens=399, cost=0.015598
2025-07-01 11:06:14.024 | DEBUG    | Trying to select search APIs in json. Try 1 of 5.
2025-07-01 11:06:18.113 | INFO     | Model API request cost info: input_tokens=1066, output_tokens=367, cost=0.006335
2025-07-01 11:06:18.118 | DEBUG    | {
  "API_calls": [],
  "collected_information": "1. Project Type & Language: C++ project.\n2. Build System: CMake.\n3. Required Compiler: C++11 compatible compiler (e.g., GCC 4.8.1+ or Clang 3.5+).\n4. Required CMake Version: 3.10 or higher.\n5. Operating System (Target for Docker): Linux (Ubuntu/Debian based is common for C/C++ development).\n6. Core System Dependencies: `build-essential` (for `g++`, `make`), `cmake`, `git`.\n7. Project-Specific Build Options for Tests: The CMake flag `-DSPDLOG_BUILD_TESTS=ON` is essential to build the test executable.\n8. Build Steps:\n```bash\ngit clone https://github.com/gabime/spdlog.git # (already cloned, but represents the initial state)\ncd spdlog\nmkdir build\ncd build\ncmake -DSPDLOG_BUILD_TESTS=ON ..\ncmake --build . -j$(nproc)\n```\n9. Test Framework: Catch2 (implicitly identified through CI configuration and test executable name).\n10. Test Executable Name & Location: `spdlog-utests` located in `build/tests/` (e.g., `build/tests/spdlog-utests`).\n11. Test Execution Command: `./tests/spdlog-utests` (relative to the `build` directory). The specified `test_registry.cpp` is part of this collective test executable.",
  "terminate": true
}
2025-07-01 11:06:18.119 | DEBUG    | Extracted a valid json
2025-07-01 11:06:18.134 | INFO     | Trying to extract a dockerfile. Try 1 of 3.
2025-07-01 11:06:26.083 | INFO     | Model API request cost info: input_tokens=2357, output_tokens=316, cost=0.009052
2025-07-01 11:06:26.087 | INFO     | Raw dockerfile and produced in try 1. Writing dockerfile into file.
2025-07-01 11:06:26.124 | INFO     | Trying to extract a eval script. Try 1 of 3.
2025-07-01 11:06:36.642 | INFO     | Model API request cost info: input_tokens=2427, output_tokens=367, cost=0.009738
2025-07-01 11:06:36.645 | INFO     | Raw script and produced in try 1. Writing script into file.
2025-07-01 11:11:31.664 | DEBUG    | Result of dispatch_intent: ('Image built successfully!\nContainer 46905ce34f101273c6932bb00771e24db211ccb67b6c508fbdb3c1ed38734b59 started.\nPatch applied successfully.\nNote: Git diff changed after test execution.\nFind test_output.txt! Waiting for analysis. ', 'Docker image gabime__spdlog-3398-dockerfile1:latest built successfully.\nContainer started.\nPatch applied.\nGit diff changed.\nObtain test results successfully.', True)
2025-07-01 11:11:31.671 | DEBUG    | Trying to analyze the test log. Try 1 of 3.
2025-07-01 11:11:48.337 | INFO     | Model API request cost info: input_tokens=1975, output_tokens=382, cost=0.008758
2025-07-01 11:11:48.341 | DEBUG    | {
  "is_finish": false,
  "guidance_for_write_dockerfile_agent": "",
  "guidance_for_write_eval_script_agent": "The tests did not run because the Catch2 filter '[test_registry]' did not match any test cases, as indicated by the log messages 'No test cases matched '[test_registry]' and 'No tests ran'. The test executable `spdlog-utests` was found and executed, but no tests were selected. This suggests the issue is with the test selection logic in the eval script, not the build environment. Please verify the actual Catch2 tags used within `tests/test_registry.cpp` for the specified commit (7e022c430053f71c3db80bf0eb3432392932f7e3). Once identified, update the `./tests/spdlog-utests` command to use the correct tag or a more precise test specifier (e.g., by test case names or by specifying the file path directly if supported by Catch2's command-line interface for that version).",
  "guidance_for_context_retrieval_agent": "Retrieve the content of the file 'tests/test_registry.cpp' from the 'gabime/spdlog' repository at commit '7e022c430053f71c3db80bf0eb3432392932f7e3'. This is necessary to inspect the `TEST_CASE` definitions and their associated Catch2 tags to determine the correct filter for test execution. This information will inform the 'write_eval_script_agent' on how to modify the test command."
}
2025-07-01 11:11:48.342 | DEBUG    | Extracted a valid json
2025-07-01 11:11:58.257 | INFO     | Model API request cost info: input_tokens=1135, output_tokens=349, cost=0.006328
2025-07-01 11:11:58.522 | DEBUG    | Trying to select search APIs in json. Try 1 of 5.
2025-07-01 11:12:00.749 | INFO     | Model API request cost info: input_tokens=1017, output_tokens=235, cost=0.004893
2025-07-01 11:12:00.752 | DEBUG    | {
  "API_calls": [
    "browse_file_for_environment_info(\"CMakeLists.txt\", \"Identify C++ standard, compiler requirements, build steps, test dependencies (e.g., Catch2), and how tests are run (e.g., ctest commands).\")",
    "browse_file_for_environment_info(\"README.md\", \"Look for general build instructions, system dependencies, and testing information.\")",
    "browse_file_for_environment_info(\"tests/test_registry.cpp\", \"Extract all TEST_CASE definitions and any associated Catch2 tags for test filtering.\")"
  ],
  "collected_information": "To gather environment setup and test execution details for 'gabime/spdlog', I plan to examine 'CMakeLists.txt' for build and test configurations, 'README.md' for general instructions, and 'tests/test_registry.cpp' for Catch2 TEST_CASE definitions and tags. This will help understand the build system and how to run targeted tests.",
  "terminate": false
}
2025-07-01 11:12:00.753 | DEBUG    | Extracted a valid json
2025-07-01 11:12:00.765 | INFO     | entering browse
2025-07-01 11:12:00.766 | INFO     | # Copyright(c) 2019 spdlog authors Distributed under the MIT License (http://opensource.org/licenses/MIT)

cmake_minimum_required(VERSION 3.10...3.21)

# ---------------------------------------------------------------------------------------
# Start spdlog project
# ---------------------------------------------------------------------------------------
include(cmake/utils.cmake)
include(cmake/ide.cmake)

spdlog_extract_version()

project(spdlog VERSION ${SPDLOG_VERSION} LANGUAGES CXX)
message(STATUS "Build spdlog: ${SPDLOG_VERSION}")

include(GNUInstallDirs)

# ---------------------------------------------------------------------------------------
# Set default build to release
# ---------------------------------------------------------------------------------------
if(NOT CMAKE_BUILD_TYPE AND NOT CMAKE_CONFIGURATION_TYPES)
    set(CMAKE_BUILD_TYPE "Release" CACHE STRING "Choose Release or Debug" FORCE)
endif()

# ---------------------------------------------------------------------------------------
# Compiler config
# ---------------------------------------------------------------------------------------
if(SPDLOG_USE_STD_FORMAT)
    set(CMAKE_CXX_STANDARD 20)
    set(CMAKE_CXX_STANDARD_REQUIRED ON)
elseif(NOT CMAKE_CXX_STANDARD)
    set(CMAKE_CXX_STANDARD 11)
    set(CMAKE_CXX_STANDARD_REQUIRED ON)
endif()

set(CMAKE_CXX_EXTENSIONS OFF)

if(CMAKE_SYSTEM_NAME MATCHES "CYGWIN" OR CMAKE_SYSTEM_NAME MATCHES "MSYS" OR CMAKE_SYSTEM_NAME MATCHES "MINGW")
    set(CMAKE_CXX_EXTENSIONS ON)
endif()

# ---------------------------------------------------------------------------------------
# Set SPDLOG_MASTER_PROJECT to ON if we are building spdlog
# ---------------------------------------------------------------------------------------
# Check if spdlog is being used directly or via add_subdirectory, but allow overriding
if(NOT DEFINED SPDLOG_MASTER_PROJECT)
    if(CMAKE_CURRENT_SOURCE_DIR STREQUAL CMAKE_SOURCE_DIR)
        set(SPDLOG_MASTER_PROJECT ON)
    else()
        set(SPDLOG_MASTER_PROJECT OFF)
    endif()
endif()

option(SPDLOG_BUILD_ALL "Build all artifacts" OFF)

# build shared option
option(SPDLOG_BUILD_SHARED "Build shared library" OFF)

# precompiled headers option
option(SPDLOG_ENABLE_PCH "Build static or shared library using precompiled header to speed up compilation time" OFF)

# build position independent code
option(SPDLOG_BUILD_PIC "Build position independent code (-fPIC)" OFF)

# example options
option(SPDLOG_BUILD_EXAMPLE "Build example" ${SPDLOG_MASTER_PROJECT})
option(SPDLOG_BUILD_EXAMPLE_HO "Build header only example" OFF)

# testing options
option(SPDLOG_BUILD_TESTS "Build tests" OFF)
option(SPDLOG_BUILD_TESTS_HO "Build tests using the header only version" OFF)

# bench options
option(SPDLOG_BUILD_BENCH "Build benchmarks (Requires https://github.com/google/benchmark.git to be installed)" OFF)

# sanitizer options
option(SPDLOG_SANITIZE_ADDRESS "Enable address sanitizer in tests" OFF)
option(SPDLOG_SANITIZE_THREAD "Enable thread sanitizer in tests" OFF)
if(SPDLOG_SANITIZE_ADDRESS AND SPDLOG_SANITIZE_THREAD)
    message(FATAL_ERROR "SPDLOG_SANITIZE_ADDRESS and SPDLOG_SANITIZE_THREAD are mutually exclusive")
endif()

# warning options
option(SPDLOG_BUILD_WARNINGS "Enable compiler warnings" OFF)

# install options
option(SPDLOG_SYSTEM_INCLUDES "Include as system headers (skip for clang-tidy)." OFF)
option(SPDLOG_INSTALL "Generate the install target" ${SPDLOG_MASTER_PROJECT})
option(SPDLOG_USE_STD_FORMAT "Use std::format instead of fmt library." OFF)
option(SPDLOG_FMT_EXTERNAL "Use external fmt library instead of bundled" OFF)
option(SPDLOG_FMT_EXTERNAL_HO "Use external fmt header-only library instead of bundled" OFF)
option(SPDLOG_NO_EXCEPTIONS "Compile with -fno-exceptions. Call abort() on any spdlog exceptions" OFF)

if(SPDLOG_FMT_EXTERNAL AND SPDLOG_FMT_EXTERNAL_HO)
    message(FATAL_ERROR "SPDLOG_FMT_EXTERNAL and SPDLOG_FMT_EXTERNAL_HO are mutually exclusive")
endif()

if(SPDLOG_USE_STD_FORMAT AND SPDLOG_FMT_EXTERNAL_HO)
    message(FATAL_ERROR "SPDLOG_USE_STD_FORMAT and SPDLOG_FMT_EXTERNAL_HO are mutually exclusive")
endif()

if(SPDLOG_USE_STD_FORMAT AND SPDLOG_FMT_EXTERNAL)
    message(FATAL_ERROR "SPDLOG_USE_STD_FORMAT and SPDLOG_FMT_EXTERNAL are mutually exclusive")
endif()

# misc tweakme options
if(WIN32)
    option(SPDLOG_WCHAR_SUPPORT "Support wchar api" OFF)
    option(SPDLOG_WCHAR_FILENAMES "Support wchar filenames" OFF)
    option(SPDLOG_WCHAR_CONSOLE "Support wchar output to console" OFF)
else()
    set(SPDLOG_WCHAR_SUPPORT OFF CACHE BOOL "non supported option" FORCE)
    set(SPDLOG_WCHAR_FILENAMES OFF CACHE BOOL "non supported option" FORCE)
    set(SPDLOG_WCHAR_CONSOLE OFF CACHE BOOL "non supported option" FORCE)
endif()

if(MSVC)
    option(SPDLOG_MSVC_UTF8 "Enable/disable msvc /utf-8 flag required by fmt lib" ON)
endif()

if(${CMAKE_SYSTEM_NAME} STREQUAL "Linux")
    option(SPDLOG_CLOCK_COARSE "Use CLOCK_REALTIME_COARSE instead of the regular clock," OFF)
else()
    set(SPDLOG_CLOCK_COARSE OFF CACHE BOOL "non supported option" FORCE)
endif()

option(SPDLOG_PREVENT_CHILD_FD "Prevent from child processes to inherit log file descriptors" OFF)
option(SPDLOG_NO_THREAD_ID "prevent spdlog from querying the thread id on each log call if thread id is not needed" OFF)
option(SPDLOG_NO_TLS "prevent spdlog from using thread local storage" OFF)
option(
    SPDLOG_NO_ATOMIC_LEVELS
    "prevent spdlog from using of std::atomic log levels (use only if your code never modifies log levels concurrently"
    OFF)
option(SPDLOG_DISABLE_DEFAULT_LOGGER "Disable default logger creation" OFF)
option(SPDLOG_FWRITE_UNLOCKED "Use the unlocked variant of fwrite. Leave this on unless your libc doesn't have it" ON)

# clang-tidy
option(SPDLOG_TIDY "run clang-tidy" OFF)

if(SPDLOG_TIDY)
    set(CMAKE_CXX_CLANG_TIDY "clang-tidy")
    set(CMAKE_EXPORT_COMPILE_COMMANDS ON)
    message(STATUS "Enabled clang-tidy")
endif()

if(SPDLOG_BUILD_PIC)
    set(CMAKE_POSITION_INDEPENDENT_CODE ON)
endif()

find_package(Threads REQUIRED)
message(STATUS "Build type: " ${CMAKE_BUILD_TYPE})
# ---------------------------------------------------------------------------------------
# Static/Shared library
# ---------------------------------------------------------------------------------------
set(SPDLOG_SRCS src/spdlog.cpp src/stdout_sinks.cpp src/color_sinks.cpp src/file_sinks.cpp src/async.cpp src/cfg.cpp)

if(NOT SPDLOG_USE_STD_FORMAT AND NOT SPDLOG_FMT_EXTERNAL AND NOT SPDLOG_FMT_EXTERNAL_HO)
    list(APPEND SPDLOG_SRCS src/bundled_fmtlib_format.cpp)
endif()

if(SPDLOG_BUILD_SHARED OR BUILD_SHARED_LIBS)
    if(WIN32)
        configure_file(${CMAKE_CURRENT_SOURCE_DIR}/cmake/version.rc.in ${CMAKE_CURRENT_BINARY_DIR}/version.rc @ONLY)
        list(APPEND SPDLOG_SRCS ${CMAKE_CURRENT_BINARY_DIR}/version.rc)
    endif()
    add_library(spdlog SHARED ${SPDLOG_SRCS} ${SPDLOG_ALL_HEADERS})
    target_compile_definitions(spdlog PUBLIC SPDLOG_SHARED_LIB)
    if(CMAKE_CXX_COMPILER_ID STREQUAL "MSVC")
        target_compile_options(spdlog PUBLIC $<$<AND:$<CXX_COMPILER_ID:MSVC>,$<NOT:$<COMPILE_LANGUAGE:CUDA>>>:/wd4251
                                             /wd4275>)
    endif()
    if(NOT SPDLOG_USE_STD_FORMAT AND NOT SPDLOG_FMT_EXTERNAL AND NOT SPDLOG_FMT_EXTERNAL_HO)
        target_compile_definitions(spdlog PRIVATE FMT_LIB_EXPORT PUBLIC FMT_SHARED)
    endif()
else()
    add_library(spdlog STATIC ${SPDLOG_SRCS} ${SPDLOG_ALL_HEADERS})
endif()

add_library(spdlog::spdlog ALIAS spdlog)

set(SPDLOG_INCLUDES_LEVEL "")
if(SPDLOG_SYSTEM_INCLUDES)
    set(SPDLOG_INCLUDES_LEVEL "SYSTEM")
endif()

target_compile_definitions(spdlog PUBLIC SPDLOG_COMPILED_LIB)
target_include_directories(spdlog ${SPDLOG_INCLUDES_LEVEL} PUBLIC "$<BUILD_INTERFACE:${CMAKE_CURRENT_LIST_DIR}/include>"
                                                                  "$<INSTALL_INTERFACE:${CMAKE_INSTALL_INCLUDEDIR}>")
target_link_libraries(spdlog PUBLIC Threads::Threads)
spdlog_enable_warnings(spdlog)

set_target_properties(spdlog PROPERTIES VERSION ${SPDLOG_VERSION} SOVERSION
                                                                  ${SPDLOG_VERSION_MAJOR}.${SPDLOG_VERSION_MINOR})
set_target_properties(spdlog PROPERTIES DEBUG_POSTFIX d)

if(COMMAND target_precompile_headers AND SPDLOG_ENABLE_PCH)
    configure_file(${CMAKE_CURRENT_SOURCE_DIR}/cmake/pch.h.in ${PROJECT_BINARY_DIR}/spdlog_pch.h @ONLY)
    target_precompile_headers(spdlog PRIVATE ${PROJECT_BINARY_DIR}/spdlog_pch.h)
endif()

# sanitizer support
if(SPDLOG_SANITIZE_ADDRESS)
    spdlog_enable_addr_sanitizer(spdlog)
elseif(SPDLOG_SANITIZE_THREAD)
    spdlog_enable_thread_sanitizer(spdlog)
endif()

# ---------------------------------------------------------------------------------------
# Header only version
# ---------------------------------------------------------------------------------------
add_library(spdlog_header_only INTERFACE)
add_library(spdlog::spdlog_header_only ALIAS spdlog_header_only)

target_include_directories(
    spdlog_header_only ${SPDLOG_INCLUDES_LEVEL} INTERFACE "$<BUILD_INTERFACE:${CMAKE_CURRENT_LIST_DIR}/include>"
                                                          "$<INSTALL_INTERFACE:${CMAKE_INSTALL_INCLUDEDIR}>")
target_link_libraries(spdlog_header_only INTERFACE Threads::Threads)

# ---------------------------------------------------------------------------------------
# Use fmt package if using external fmt
# ---------------------------------------------------------------------------------------
if(SPDLOG_FMT_EXTERNAL OR SPDLOG_FMT_EXTERNAL_HO)
    if(NOT TARGET fmt::fmt)
        find_package(fmt CONFIG REQUIRED)
    endif()
    target_compile_definitions(spdlog PUBLIC SPDLOG_FMT_EXTERNAL)
    target_compile_definitions(spdlog_header_only INTERFACE SPDLOG_FMT_EXTERNAL)

    # use external fmt-header-only
    if(SPDLOG_FMT_EXTERNAL_HO)
        target_link_libraries(spdlog PUBLIC fmt::fmt-header-only)
        target_link_libraries(spdlog_header_only INTERFACE fmt::fmt-header-only)
    else() # use external compile fmt
        target_link_libraries(spdlog PUBLIC fmt::fmt)
        target_link_libraries(spdlog_header_only INTERFACE fmt::fmt)
    endif()

    set(PKG_CONFIG_REQUIRES fmt) # add dependency to pkg-config
endif()

# ---------------------------------------------------------------------------------------
# Check if fwrite_unlocked/_fwrite_nolock is available
# ---------------------------------------------------------------------------------------
if(SPDLOG_FWRITE_UNLOCKED)
    include(CheckSymbolExists)
    if(WIN32)
        check_symbol_exists(_fwrite_nolock "stdio.h" HAVE_FWRITE_UNLOCKED)
    else()
        check_symbol_exists(fwrite_unlocked "stdio.h" HAVE_FWRITE_UNLOCKED)
    endif()
    if(HAVE_FWRITE_UNLOCKED)
        target_compile_definitions(spdlog PRIVATE SPDLOG_FWRITE_UNLOCKED)
        target_compile_definitions(spdlog_header_only INTERFACE SPDLOG_FWRITE_UNLOCKED)
    endif()
endif()

# ---------------------------------------------------------------------------------------
# Add required libraries for Android CMake build
# ---------------------------------------------------------------------------------------
if(ANDROID)
    target_link_libraries(spdlog PUBLIC log)
    target_link_libraries(spdlog_header_only INTERFACE log)
endif()

# ---------------------------------------------------------------------------------------
# Misc definitions according to tweak options
# ---------------------------------------------------------------------------------------
set(SPDLOG_WCHAR_TO_UTF8_SUPPORT ${SPDLOG_WCHAR_SUPPORT})
set(SPDLOG_UTF8_TO_WCHAR_CONSOLE ${SPDLOG_WCHAR_CONSOLE})
foreach(
    SPDLOG_OPTION
    SPDLOG_WCHAR_TO_UTF8_SUPPORT
    SPDLOG_UTF8_TO_WCHAR_CONSOLE
    SPDLOG_WCHAR_FILENAMES
    SPDLOG_NO_EXCEPTIONS
    SPDLOG_CLOCK_COARSE
    SPDLOG_PREVENT_CHILD_FD
    SPDLOG_NO_THREAD_ID
    SPDLOG_NO_TLS
    SPDLOG_NO_ATOMIC_LEVELS
    SPDLOG_DISABLE_DEFAULT_LOGGER
    SPDLOG_USE_STD_FORMAT)
    if(${SPDLOG_OPTION})
        target_compile_definitions(spdlog PUBLIC ${SPDLOG_OPTION})
        target_compile_definitions(spdlog_header_only INTERFACE ${SPDLOG_OPTION})
    endif()
endforeach()

if(MSVC)
    target_compile_options(spdlog PRIVATE "/Zc:__cplusplus")
    target_compile_options(spdlog_header_only INTERFACE "/Zc:__cplusplus")
    if(SPDLOG_MSVC_UTF8)
        # fmtlib requires the /utf-8 flag when building with msvc. see https://github.com/fmtlib/fmt/pull/4159 on the
        # purpose of the additional
        # "$<$<AND:$<COMPILE_LANGUAGE:CXX>,$<CXX_COMPILER_ID:MSVC>>"
        target_compile_options(spdlog PUBLIC $<$<AND:$<COMPILE_LANGUAGE:CXX>,$<CXX_COMPILER_ID:MSVC>>:/utf-8>)
        target_compile_options(spdlog_header_only
                               INTERFACE $<$<AND:$<COMPILE_LANGUAGE:CXX>,$<CXX_COMPILER_ID:MSVC>>:/utf-8>)
    endif()
endif()

# ---------------------------------------------------------------------------------------
# If exceptions are disabled, disable them in the bundled fmt as well
# ---------------------------------------------------------------------------------------
if(SPDLOG_NO_EXCEPTIONS)
    if(NOT SPDLOG_FMT_EXTERNAL AND NOT SPDLOG_FMT_EXTERNAL_HO)
        target_compile_definitions(spdlog PUBLIC FMT_USE_EXCEPTIONS=0)
    endif()
    if(NOT MSVC)
        target_compile_options(spdlog PRIVATE -fno-exceptions)
    else()
        target_compile_options(spdlog PRIVATE /EHs-c-)
        target_compile_definitions(spdlog PRIVATE _HAS_EXCEPTIONS=0)
    endif()
endif()
# ---------------------------------------------------------------------------------------
# Build binaries
# ---------------------------------------------------------------------------------------
if(SPDLOG_BUILD_EXAMPLE OR SPDLOG_BUILD_EXAMPLE_HO OR SPDLOG_BUILD_ALL)
    message(STATUS "Generating example(s)")
    add_subdirectory(example)
    spdlog_enable_warnings(example)
    if(SPDLOG_BUILD_EXAMPLE_HO)
        spdlog_enable_warnings(example_header_only)
    endif()
endif()

if(SPDLOG_BUILD_TESTS OR SPDLOG_BUILD_TESTS_HO OR SPDLOG_BUILD_ALL)
    message(STATUS "Generating tests")
    enable_testing()
    add_subdirectory(tests)
endif()

if(SPDLOG_BUILD_BENCH OR SPDLOG_BUILD_ALL)
    message(STATUS "Generating benchmarks")
    add_subdirectory(bench)
endif()

# ---------------------------------------------------------------------------------------
# Install
# ---------------------------------------------------------------------------------------
if(SPDLOG_INSTALL)
    message(STATUS "Generating install")
    set(project_config_in "${CMAKE_CURRENT_LIST_DIR}/cmake/spdlogConfig.cmake.in")
    set(project_config_out "${CMAKE_CURRENT_BINARY_DIR}/spdlogConfig.cmake")
    set(config_targets_file "spdlogConfigTargets.cmake")
    set(version_config_file "${CMAKE_CURRENT_BINARY_DIR}/spdlogConfigVersion.cmake")
    set(export_dest_dir "${CMAKE_INSTALL_LIBDIR}/cmake/spdlog")
    set(pkgconfig_install_dir "${CMAKE_INSTALL_LIBDIR}/pkgconfig")
    set(pkg_config "${CMAKE_BINARY_DIR}/${PROJECT_NAME}.pc")

    # ---------------------------------------------------------------------------------------
    # Include files
    # ---------------------------------------------------------------------------------------
    install(DIRECTORY include/ DESTINATION "${CMAKE_INSTALL_INCLUDEDIR}" PATTERN "fmt/bundled" EXCLUDE)
    install(
        TARGETS spdlog spdlog_header_only
        EXPORT spdlog
        LIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR}
        ARCHIVE DESTINATION ${CMAKE_INSTALL_LIBDIR}
        RUNTIME DESTINATION ${CMAKE_INSTALL_BINDIR})

    if(NOT SPDLOG_USE_STD_FORMAT AND NOT SPDLOG_FMT_EXTERNAL AND NOT SPDLOG_FMT_EXTERNAL_HO)
        install(DIRECTORY include/${PROJECT_NAME}/fmt/bundled/
                DESTINATION "${CMAKE_INSTALL_INCLUDEDIR}/${PROJECT_NAME}/fmt/bundled/")
    endif()

    # ---------------------------------------------------------------------------------------
    # Install pkg-config file
    # ---------------------------------------------------------------------------------------
    if(IS_ABSOLUTE "${CMAKE_INSTALL_INCLUDEDIR}")
        set(PKG_CONFIG_INCLUDEDIR "${CMAKE_INSTALL_INCLUDEDIR}")
    else()
        set(PKG_CONFIG_INCLUDEDIR "\${prefix}/${CMAKE_INSTALL_INCLUDEDIR}")
    endif()
    if(IS_ABSOLUTE "${CMAKE_INSTALL_LIBDIR}")
        set(PKG_CONFIG_LIBDIR "${CMAKE_INSTALL_LIBDIR}")
    else()
        set(PKG_CONFIG_LIBDIR "\${exec_prefix}/${CMAKE_INSTALL_LIBDIR}")
    endif()
    get_target_property(PKG_CONFIG_DEFINES spdlog INTERFACE_COMPILE_DEFINITIONS)
    string(REPLACE ";" " -D" PKG_CONFIG_DEFINES "${PKG_CONFIG_DEFINES}")
    string(CONCAT PKG_CONFIG_DEFINES "-D" "${PKG_CONFIG_DEFINES}")
    configure_file("cmake/${PROJECT_NAME}.pc.in" "${pkg_config}" @ONLY)
    install(FILES "${pkg_config}" DESTINATION "${pkgconfig_install_dir}")

    # ---------------------------------------------------------------------------------------
    # Install CMake config files
    # ---------------------------------------------------------------------------------------
    export(TARGETS spdlog spdlog_header_only NAMESPACE spdlog::
           FILE "${CMAKE_CURRENT_BINARY_DIR}/${config_targets_file}")
    install(EXPORT spdlog DESTINATION ${export_dest_dir} NAMESPACE spdlog:: FILE ${config_targets_file})

    include(CMakePackageConfigHelpers)
    configure_package_config_file("${project_config_in}" "${project_config_out}" INSTALL_DESTINATION ${export_dest_dir})

    write_basic_package_version_file("${version_config_file}" COMPATIBILITY SameMajorVersion)
    install(FILES "${project_config_out}" "${version_config_file}" DESTINATION "${export_dest_dir}")

    # ---------------------------------------------------------------------------------------
    # Support creation of installable packages
    # ---------------------------------------------------------------------------------------
    include(cmake/spdlogCPack.cmake)
endif()

2025-07-01 11:12:00.767 | DEBUG    | Analyzing file content. Try 1 of 3
2025-07-01 11:12:15.986 | INFO     | Model API request cost info: input_tokens=5280, output_tokens=636, cost=0.019560
2025-07-01 11:12:15.989 | SUCCESS  | Successfully extracted environment config
2025-07-01 11:12:15.990 | INFO     | ******
2025-07-01 11:12:15.990 | INFO     | Runtime Requirements:
- C++11 (default) or C++20 (if `SPDLOG_USE_STD_FORMAT` is ON)
- Threads library (e.g., Pthreads on Linux, or Windows equivalents)
- CMake 3.10 to 3.21

Compiler Specifics:
- MSVC: Optional `/utf-8` flag (can be enabled with `SPDLOG_MSVC_UTF8`) and specific warning disables (`/wd4251`, `/wd4275`).
- Exceptions: Can be compiled without exceptions (`-fno-exceptions` or `/EHs-c-`) if `SPDLOG_NO_EXCEPTIONS` is ON.
- Sanitizers: Support for Address Sanitizer (`SPDLOG_SANITIZE_ADDRESS`) and Thread Sanitizer (`SPDLOG_SANITIZE_THREAD`) if enabled.

Build Steps:
The project uses CMake as its build system.
1.  **Configure**: `cmake -B <build_directory> -S .`
    -   Default `CMAKE_BUILD_TYPE` is "Release".
    -   Build options can be set using `-D` flags, e.g., `-DSPDLOG_BUILD_SHARED=ON` for shared library, `-DSPDLOG_BUILD_TESTS=ON` to build tests.
    -   `SPDLOG_BUILD_ALL` option can build all artifacts (examples, tests, benchmarks).
2.  **Build**: `cmake --build <build_directory>`
    -   Alternatively, `make` or `ninja` from the build directory depending on the CMake generator.

Test Dependencies:
-   The build system directly includes `tests` as a subdirectory. Specific external testing frameworks (like Catch2 or Google Test) are not explicitly declared in this root `CMakeLists.txt` but would be defined within the `tests/CMakeLists.txt` file.
-   Benchmarking (if `SPDLOG_BUILD_BENCH` is ON) requires Google Benchmark (`https://github.com/google/benchmark.git`).

Testing:
-   Test framework: Not explicitly specified in this file, but `enable_testing()` is called, indicating tests are integrated with CTest.
-   To enable building tests, the CMake option `SPDLOG_BUILD_TESTS` or `SPDLOG_BUILD_TESTS_HO` (or `SPDLOG_BUILD_ALL`) must be set to ON during configuration.
    -   Example: `cmake -B build -S . -DSPDLOG_BUILD_TESTS=ON`
-   Test command: After building the project, tests can be run using `ctest` from the build directory.
    -   Example: `ctest` (from `<build_directory>`)
    -   Sanitizers can be enabled for tests via `SPDLOG_SANITIZE_ADDRESS` or `SPDLOG_SANITIZE_THREAD` options.
2025-07-01 11:12:15.991 | INFO     | ******
2025-07-01 11:12:15.991 | DEBUG    | Result of dispatch_intent: ('Runtime Requirements:\n- C++11 (default) or C++20 (if `SPDLOG_USE_STD_FORMAT` is ON)\n- Threads library (e.g., Pthreads on Linux, or Windows equivalents)\n- CMake 3.10 to 3.21\n\nCompiler Specifics:\n- MSVC: Optional `/utf-8` flag (can be enabled with `SPDLOG_MSVC_UTF8`) and specific warning disables (`/wd4251`, `/wd4275`).\n- Exceptions: Can be compiled without exceptions (`-fno-exceptions` or `/EHs-c-`) if `SPDLOG_NO_EXCEPTIONS` is ON.\n- Sanitizers: Support for Address Sanitizer (`SPDLOG_SANITIZE_ADDRESS`) and Thread Sanitizer (`SPDLOG_SANITIZE_THREAD`) if enabled.\n\nBuild Steps:\nThe project uses CMake as its build system.\n1.  **Configure**: `cmake -B <build_directory> -S .`\n    -   Default `CMAKE_BUILD_TYPE` is "Release".\n    -   Build options can be set using `-D` flags, e.g., `-DSPDLOG_BUILD_SHARED=ON` for shared library, `-DSPDLOG_BUILD_TESTS=ON` to build tests.\n    -   `SPDLOG_BUILD_ALL` option can build all artifacts (examples, tests, benchmarks).\n2.  **Build**: `cmake --build <build_directory>`\n    -   Alternatively, `make` or `ninja` from the build directory depending on the CMake generator.\n\nTest Dependencies:\n-   The build system directly includes `tests` as a subdirectory. Specific external testing frameworks (like Catch2 or Google Test) are not explicitly declared in this root `CMakeLists.txt` but would be defined within the `tests/CMakeLists.txt` file.\n-   Benchmarking (if `SPDLOG_BUILD_BENCH` is ON) requires Google Benchmark (`https://github.com/google/benchmark.git`).\n\nTesting:\n-   Test framework: Not explicitly specified in this file, but `enable_testing()` is called, indicating tests are integrated with CTest.\n-   To enable building tests, the CMake option `SPDLOG_BUILD_TESTS` or `SPDLOG_BUILD_TESTS_HO` (or `SPDLOG_BUILD_ALL`) must be set to ON during configuration.\n    -   Example: `cmake -B build -S . -DSPDLOG_BUILD_TESTS=ON`\n-   Test command: After building the project, tests can be run using `ctest` from the build directory.\n    -   Example: `ctest` (from `<build_directory>`)\n    -   Sanitizers can be enabled for tests via `SPDLOG_SANITIZE_ADDRESS` or `SPDLOG_SANITIZE_THREAD` options.', 'Get File Info', True)
2025-07-01 11:12:15.992 | INFO     | entering browse
2025-07-01 11:12:15.993 | INFO     | # spdlog

 
[![ci](https://github.com/gabime/spdlog/actions/workflows/linux.yml/badge.svg)](https://github.com/gabime/spdlog/actions/workflows/linux.yml)&nbsp;
[![ci](https://github.com/gabime/spdlog/actions/workflows/windows.yml/badge.svg)](https://github.com/gabime/spdlog/actions/workflows/windows.yml)&nbsp;
[![ci](https://github.com/gabime/spdlog/actions/workflows/macos.yml/badge.svg)](https://github.com/gabime/spdlog/actions/workflows/macos.yml)&nbsp;
[![Build status](https://ci.appveyor.com/api/projects/status/d2jnxclg20vd0o50?svg=true&branch=v1.x)](https://ci.appveyor.com/project/gabime/spdlog) [![Release](https://img.shields.io/github/release/gabime/spdlog.svg)](https://github.com/gabime/spdlog/releases/latest)

Fast C++ logging library


## Install
#### Header-only version
Copy the include [folder](include/spdlog) to your build tree and use a C++11 compiler.

#### Compiled version (recommended - much faster compile times)
```console
$ git clone https://github.com/gabime/spdlog.git
$ cd spdlog && mkdir build && cd build
$ cmake .. && cmake --build .
```
see example [CMakeLists.txt](example/CMakeLists.txt) on how to use.

## Platforms
* Linux, FreeBSD, OpenBSD, Solaris, AIX
* Windows (msvc 2013+, cygwin)
* macOS (clang 3.5+)
* Android

## Package managers:
* Debian: `sudo apt install libspdlog-dev`
* Homebrew: `brew install spdlog`
* MacPorts: `sudo port install spdlog`
* FreeBSD:  `pkg install spdlog`
* Fedora: `dnf install spdlog`
* Gentoo: `emerge dev-libs/spdlog`
* Arch Linux: `pacman -S spdlog`
* openSUSE: `sudo zypper in spdlog-devel`
* ALT Linux: `apt-get install libspdlog-devel`
* vcpkg: `vcpkg install spdlog`
* conan: `conan install --requires=spdlog/[*]`
* conda: `conda install -c conda-forge spdlog`
* build2: ```depends: spdlog ^1.8.2```


## Features
* Very fast (see [benchmarks](#benchmarks) below).
* Headers only or compiled
* Feature-rich formatting, using the excellent [fmt](https://github.com/fmtlib/fmt) library.
* Asynchronous mode (optional)
* [Custom](https://github.com/gabime/spdlog/wiki/Custom-formatting) formatting.
* Multi/Single threaded loggers.
* Various log targets:
  * Rotating log files.
  * Daily log files.
  * Console logging (colors supported).
  * syslog.
  * Windows event log.
  * Windows debugger (```OutputDebugString(..)```).
  * Log to Qt widgets ([example](#log-to-qt-with-nice-colors)).
  * Easily [extendable](https://github.com/gabime/spdlog/wiki/Sinks#implementing-your-own-sink) with custom log targets.
* Log filtering - log levels can be modified at runtime as well as compile time.
* Support for loading log levels from argv or environment var.
* [Backtrace](#backtrace-support) support - store debug messages in a ring buffer and display them later on demand.

## Usage samples

#### Basic usage
```c++
#include "spdlog/spdlog.h"

int main() 
{
    spdlog::info("Welcome to spdlog!");
    spdlog::error("Some error message with arg: {}", 1);
    
    spdlog::warn("Easy padding in numbers like {:08d}", 12);
    spdlog::critical("Support for int: {0:d};  hex: {0:x};  oct: {0:o}; bin: {0:b}", 42);
    spdlog::info("Support for floats {:03.2f}", 1.23456);
    spdlog::info("Positional args are {1} {0}..", "too", "supported");
    spdlog::info("{:<30}", "left aligned");
    
    spdlog::set_level(spdlog::level::debug); // Set global log level to debug
    spdlog::debug("This message should be displayed..");    
    
    // change log pattern
    spdlog::set_pattern("[%H:%M:%S %z] [%n] [%^---%L---%$] [thread %t] %v");
    
    // Compile time log levels
    // Note that this does not change the current log level, it will only
    // remove (depending on SPDLOG_ACTIVE_LEVEL) the call on the release code.
    SPDLOG_TRACE("Some trace message with param {}", 42);
    SPDLOG_DEBUG("Some debug message");
}

```
---
#### Create stdout/stderr logger object
```c++
#include "spdlog/spdlog.h"
#include "spdlog/sinks/stdout_color_sinks.h"
void stdout_example()
{
    // create a color multi-threaded logger
    auto console = spdlog::stdout_color_mt("console");    
    auto err_logger = spdlog::stderr_color_mt("stderr");    
    spdlog::get("console")->info("loggers can be retrieved from a global registry using the spdlog::get(logger_name)");
}
```

---
#### Basic file logger
```c++
#include "spdlog/sinks/basic_file_sink.h"
void basic_logfile_example()
{
    try 
    {
        auto logger = spdlog::basic_logger_mt("basic_logger", "logs/basic-log.txt");
    }
    catch (const spdlog::spdlog_ex &ex)
    {
        std::cout << "Log init failed: " << ex.what() << std::endl;
    }
}
```
---
#### Rotating files
```c++
#include "spdlog/sinks/rotating_file_sink.h"
void rotating_example()
{
    // Create a file rotating logger with 5 MB size max and 3 rotated files
    auto max_size = 1048576 * 5;
    auto max_files = 3;
    auto logger = spdlog::rotating_logger_mt("some_logger_name", "logs/rotating.txt", max_size, max_files);
}
```

---
#### Daily files
```c++

#include "spdlog/sinks/daily_file_sink.h"
void daily_example()
{
    // Create a daily logger - a new file is created every day at 2:30 am
    auto logger = spdlog::daily_logger_mt("daily_logger", "logs/daily.txt", 2, 30);
}

```

---
#### Backtrace support
```c++
// Debug messages can be stored in a ring buffer instead of being logged immediately.
// This is useful to display debug logs only when needed (e.g. when an error happens).
// When needed, call dump_backtrace() to dump them to your log.

spdlog::enable_backtrace(32); // Store the latest 32 messages in a buffer. 
// or my_logger->enable_backtrace(32)..
for(int i = 0; i < 100; i++)
{
  spdlog::debug("Backtrace message {}", i); // not logged yet..
}
// e.g. if some error happened:
spdlog::dump_backtrace(); // log them now! show the last 32 messages
// or my_logger->dump_backtrace(32)..
```

---
#### Periodic flush
```c++
// periodically flush all *registered* loggers every 3 seconds:
// warning: only use if all your loggers are thread-safe ("_mt" loggers)
spdlog::flush_every(std::chrono::seconds(3));

```

---
#### Stopwatch
```c++
// Stopwatch support for spdlog
#include "spdlog/stopwatch.h"
void stopwatch_example()
{
    spdlog::stopwatch sw;    
    spdlog::debug("Elapsed {}", sw);
    spdlog::debug("Elapsed {:.3}", sw);       
}

```

---
#### Log binary data in hex
```c++
// many types of std::container<char> types can be used.
// ranges are supported too.
// format flags:
// {:X} - print in uppercase.
// {:s} - don't separate each byte with space.
// {:p} - don't print the position on each line start.
// {:n} - don't split the output into lines.
// {:a} - show ASCII if :n is not set.

#include "spdlog/fmt/bin_to_hex.h"

void binary_example()
{
    auto console = spdlog::get("console");
    std::array<char, 80> buf;
    console->info("Binary example: {}", spdlog::to_hex(buf));
    console->info("Another binary example:{:n}", spdlog::to_hex(std::begin(buf), std::begin(buf) + 10));
    // more examples:
    // logger->info("uppercase: {:X}", spdlog::to_hex(buf));
    // logger->info("uppercase, no delimiters: {:Xs}", spdlog::to_hex(buf));
    // logger->info("uppercase, no delimiters, no position info: {:Xsp}", spdlog::to_hex(buf));
}

```

---
#### Logger with multi sinks - each with a different format and log level
```c++

// create a logger with 2 targets, with different log levels and formats.
// The console will show only warnings or errors, while the file will log all.
void multi_sink_example()
{
    auto console_sink = std::make_shared<spdlog::sinks::stdout_color_sink_mt>();
    console_sink->set_level(spdlog::level::warn);
    console_sink->set_pattern("[multi_sink_example] [%^%l%$] %v");

    auto file_sink = std::make_shared<spdlog::sinks::basic_file_sink_mt>("logs/multisink.txt", true);
    file_sink->set_level(spdlog::level::trace);

    spdlog::logger logger("multi_sink", {console_sink, file_sink});
    logger.set_level(spdlog::level::debug);
    logger.warn("this should appear in both console and file");
    logger.info("this message should not appear in the console, only in the file");
}
```

---
#### User-defined callbacks about log events
```c++

// create a logger with a lambda function callback, the callback will be called
// each time something is logged to the logger
void callback_example()
{
    auto callback_sink = std::make_shared<spdlog::sinks::callback_sink_mt>([](const spdlog::details::log_msg &msg) {
         // for example you can be notified by sending an email to yourself
    });
    callback_sink->set_level(spdlog::level::err);

    auto console_sink = std::make_shared<spdlog::sinks::stdout_color_sink_mt>();
    spdlog::logger logger("custom_callback_logger", {console_sink, callback_sink});

    logger.info("some info log");
    logger.error("critical issue"); // will notify you
}
```

---
#### Asynchronous logging
```c++
#include "spdlog/async.h"
#include "spdlog/sinks/basic_file_sink.h"
void async_example()
{
    // default thread pool settings can be modified *before* creating the async logger:
    // spdlog::init_thread_pool(8192, 1); // queue with 8k items and 1 backing thread.
    auto async_file = spdlog::basic_logger_mt<spdlog::async_factory>("async_file_logger", "logs/async_log.txt");
    // alternatively:
    // auto async_file = spdlog::create_async<spdlog::sinks::basic_file_sink_mt>("async_file_logger", "logs/async_log.txt");   
}

```

---
#### Asynchronous logger with multi sinks
```c++
#include "spdlog/async.h"
#include "spdlog/sinks/stdout_color_sinks.h"
#include "spdlog/sinks/rotating_file_sink.h"

void multi_sink_example2()
{
    spdlog::init_thread_pool(8192, 1);
    auto stdout_sink = std::make_shared<spdlog::sinks::stdout_color_sink_mt >();
    auto rotating_sink = std::make_shared<spdlog::sinks::rotating_file_sink_mt>("mylog.txt", 1024*1024*10, 3);
    std::vector<spdlog::sink_ptr> sinks {stdout_sink, rotating_sink};
    auto logger = std::make_shared<spdlog::async_logger>("loggername", sinks.begin(), sinks.end(), spdlog::thread_pool(), spdlog::async_overflow_policy::block);
    spdlog::register_logger(logger);
}
```
 
---
#### User-defined types
```c++
template<>
struct fmt::formatter<my_type> : fmt::formatter<std::string>
{
    auto format(my_type my, format_context &ctx) const -> decltype(ctx.out())
    {
        return fmt::format_to(ctx.out(), "[my_type i={}]", my.i);
    }
};

void user_defined_example()
{
    spdlog::info("user defined type: {}", my_type(14));
}

```

---
#### User-defined flags in the log pattern
```c++ 
// Log patterns can contain custom flags.
// the following example will add new flag '%*' - which will be bound to a <my_formatter_flag> instance.
#include "spdlog/pattern_formatter.h"
class my_formatter_flag : public spdlog::custom_flag_formatter
{
public:
    void format(const spdlog::details::log_msg &, const std::tm &, spdlog::memory_buf_t &dest) override
    {
        std::string some_txt = "custom-flag";
        dest.append(some_txt.data(), some_txt.data() + some_txt.size());
    }

    std::unique_ptr<custom_flag_formatter> clone() const override
    {
        return spdlog::details::make_unique<my_formatter_flag>();
    }
};

void custom_flags_example()
{    
    auto formatter = std::make_unique<spdlog::pattern_formatter>();
    formatter->add_flag<my_formatter_flag>('*').set_pattern("[%n] [%*] [%^%l%$] %v");
    spdlog::set_formatter(std::move(formatter));
}

```

---
#### Custom error handler
```c++
void err_handler_example()
{
    // can be set globally or per logger(logger->set_error_handler(..))
    spdlog::set_error_handler([](const std::string &msg) { spdlog::get("console")->error("*** LOGGER ERROR ***: {}", msg); });
    spdlog::get("console")->info("some invalid message to trigger an error {}{}{}{}", 3);
}

```

---
#### syslog
```c++
#include "spdlog/sinks/syslog_sink.h"
void syslog_example()
{
    std::string ident = "spdlog-example";
    auto syslog_logger = spdlog::syslog_logger_mt("syslog", ident, LOG_PID);
    syslog_logger->warn("This is warning that will end up in syslog.");
}
```
---
#### Android example
```c++
#include "spdlog/sinks/android_sink.h"
void android_example()
{
    std::string tag = "spdlog-android";
    auto android_logger = spdlog::android_logger_mt("android", tag);
    android_logger->critical("Use \"adb shell logcat\" to view this message.");
}
```

---
#### Load log levels from the env variable or argv

```c++
#include "spdlog/cfg/env.h"
int main (int argc, char *argv[])
{
    spdlog::cfg::load_env_levels();
    // or specify the env variable name:
    // MYAPP_LEVEL=info,mylogger=trace && ./example
    // spdlog::cfg::load_env_levels("MYAPP_LEVEL");
    // or from the command line:
    // ./example SPDLOG_LEVEL=info,mylogger=trace
    // #include "spdlog/cfg/argv.h" // for loading levels from argv
    // spdlog::cfg::load_argv_levels(argc, argv);
}
```
So then you can:

```console
$ export SPDLOG_LEVEL=info,mylogger=trace
$ ./example
```


---
#### Log file open/close event handlers
```c++
// You can get callbacks from spdlog before/after a log file has been opened or closed. 
// This is useful for cleanup procedures or for adding something to the start/end of the log file.
void file_events_example()
{
    // pass the spdlog::file_event_handlers to file sinks for open/close log file notifications
    spdlog::file_event_handlers handlers;
    handlers.before_open = [](spdlog::filename_t filename) { spdlog::info("Before opening {}", filename); };
    handlers.after_open = [](spdlog::filename_t filename, std::FILE *fstream) { fputs("After opening\n", fstream); };
    handlers.before_close = [](spdlog::filename_t filename, std::FILE *fstream) { fputs("Before closing\n", fstream); };
    handlers.after_close = [](spdlog::filename_t filename) { spdlog::info("After closing {}", filename); };
    auto my_logger = spdlog::basic_logger_st("some_logger", "logs/events-sample.txt", true, handlers);        
}
```

---
#### Replace the Default Logger
```c++
void replace_default_logger_example()
{
    auto new_logger = spdlog::basic_logger_mt("new_default_logger", "logs/new-default-log.txt", true);
    spdlog::set_default_logger(new_logger);
    spdlog::info("new logger log message");
}
```

---
#### Log to Qt with nice colors
```c++
#include "spdlog/spdlog.h"
#include "spdlog/sinks/qt_sinks.h"
MainWindow::MainWindow(QWidget *parent) : QMainWindow(parent)
{
    setMinimumSize(640, 480);
    auto log_widget = new QTextEdit(this);
    setCentralWidget(log_widget);
    int max_lines = 500; // keep the text widget to max 500 lines. remove old lines if needed.
    auto logger = spdlog::qt_color_logger_mt("qt_logger", log_widget, max_lines);
    logger->info("Some info message");
}
```
---

#### Mapped Diagnostic Context
```c++
// Mapped Diagnostic Context (MDC) is a map that stores key-value pairs (string values) in thread local storage.
// Each thread maintains its own MDC, which loggers use to append diagnostic information to log outputs.
// Note: it is not supported in asynchronous mode due to its reliance on thread-local storage.
#include "spdlog/mdc.h"
void mdc_example()
{
    spdlog::mdc::put("key1", "value1");
    spdlog::mdc::put("key2", "value2");
    // if not using the default format, use the %& formatter to print mdc data
    // spdlog::set_pattern("[%H:%M:%S %z] [%^%L%$] [%&] %v");
}
```
---
## Benchmarks

Below are some [benchmarks](bench/bench.cpp) done in Ubuntu 64 bit, Intel i7-4770 CPU @ 3.40GHz

#### Synchronous mode
```
[info] **************************************************************
[info] Single thread, 1,000,000 iterations
[info] **************************************************************
[info] basic_st         Elapsed: 0.17 secs        5,777,626/sec
[info] rotating_st      Elapsed: 0.18 secs        5,475,894/sec
[info] daily_st         Elapsed: 0.20 secs        5,062,659/sec
[info] empty_logger     Elapsed: 0.07 secs       14,127,300/sec
[info] **************************************************************
[info] C-string (400 bytes). Single thread, 1,000,000 iterations
[info] **************************************************************
[info] basic_st         Elapsed: 0.41 secs        2,412,483/sec
[info] rotating_st      Elapsed: 0.72 secs        1,389,196/sec
[info] daily_st         Elapsed: 0.42 secs        2,393,298/sec
[info] null_st          Elapsed: 0.04 secs       27,446,957/sec
[info] **************************************************************
[info] 10 threads, competing over the same logger object, 1,000,000 iterations
[info] **************************************************************
[info] basic_mt         Elapsed: 0.60 secs        1,659,613/sec
[info] rotating_mt      Elapsed: 0.62 secs        1,612,493/sec
[info] daily_mt         Elapsed: 0.61 secs        1,638,305/sec
[info] null_mt          Elapsed: 0.16 secs        6,272,758/sec
```
#### Asynchronous mode
```
[info] -------------------------------------------------
[info] Messages     : 1,000,000
[info] Threads      : 10
[info] Queue        : 8,192 slots
[info] Queue memory : 8,192 x 272 = 2,176 KB 
[info] -------------------------------------------------
[info] 
[info] *********************************
[info] Queue Overflow Policy: block
[info] *********************************
[info] Elapsed: 1.70784 secs     585,535/sec
[info] Elapsed: 1.69805 secs     588,910/sec
[info] Elapsed: 1.7026 secs      587,337/sec
[info] 
[info] *********************************
[info] Queue Overflow Policy: overrun
[info] *********************************
[info] Elapsed: 0.372816 secs    2,682,285/sec
[info] Elapsed: 0.379758 secs    2,633,255/sec
[info] Elapsed: 0.373532 secs    2,677,147/sec

```

## Documentation

Documentation can be found in the [wiki](https://github.com/gabime/spdlog/wiki) pages.

---

Thanks to [JetBrains](https://www.jetbrains.com/?from=spdlog) for donating product licenses to help develop **spdlog** <a href="https://www.jetbrains.com/?from=spdlog"><img src="logos/jetbrains-variant-4.svg" width="94" align="center" /></a>



2025-07-01 11:12:15.994 | DEBUG    | Analyzing file content. Try 1 of 3
2025-07-01 11:12:22.632 | INFO     | Model API request cost info: input_tokens=6237, output_tokens=374, cost=0.019333
2025-07-01 11:12:22.634 | SUCCESS  | Successfully extracted environment config
2025-07-01 11:12:22.634 | INFO     | ******
2025-07-01 11:12:22.635 | INFO     | List of libraries:
- spdlog (C++ logging library)

Runtime Requirements:
- C++11 compiler (for header-only version)
- msvc 2013+ (for Windows)
- clang 3.5+ (for macOS)
- Compatible with Linux, FreeBSD, OpenBSD, Solaris, AIX, Windows, macOS, Android.

System Dependencies (via package managers):
- Debian: `libspdlog-dev`
- Homebrew: `spdlog`
- MacPorts: `spdlog`
- FreeBSD: `spdlog`
- Fedora: `spdlog`
- Gentoo: `dev-libs/spdlog`
- Arch Linux: `spdlog`
- openSUSE: `spdlog-devel`
- ALT Linux: `libspdlog-devel`
- vcpkg: `spdlog`
- conan: `spdlog/[*]`
- conda: `spdlog`
- build2: `spdlog ^1.8.2`

Build Instructions:
- **Header-only version**: Copy the `include/spdlog` folder to your build tree.
- **Compiled version (recommended)**:
    ```bash
    git clone https://github.com/gabime/spdlog.git
    cd spdlog && mkdir build && cd build
    cmake .. && cmake --build .
    ```

Testing:
- Benchmarks are described in `bench/bench.cpp`.
- No explicit test commands or test frameworks (e.g., GTest, Catch2) are mentioned in the README. The `cmake --build .` command for building the project might include building benchmark executables.
2025-07-01 11:12:22.635 | INFO     | ******
2025-07-01 11:12:22.635 | DEBUG    | Result of dispatch_intent: ('List of libraries:\n- spdlog (C++ logging library)\n\nRuntime Requirements:\n- C++11 compiler (for header-only version)\n- msvc 2013+ (for Windows)\n- clang 3.5+ (for macOS)\n- Compatible with Linux, FreeBSD, OpenBSD, Solaris, AIX, Windows, macOS, Android.\n\nSystem Dependencies (via package managers):\n- Debian: `libspdlog-dev`\n- Homebrew: `spdlog`\n- MacPorts: `spdlog`\n- FreeBSD: `spdlog`\n- Fedora: `spdlog`\n- Gentoo: `dev-libs/spdlog`\n- Arch Linux: `spdlog`\n- openSUSE: `spdlog-devel`\n- ALT Linux: `libspdlog-devel`\n- vcpkg: `spdlog`\n- conan: `spdlog/[*]`\n- conda: `spdlog`\n- build2: `spdlog ^1.8.2`\n\nBuild Instructions:\n- **Header-only version**: Copy the `include/spdlog` folder to your build tree.\n- **Compiled version (recommended)**:\n    ```bash\n    git clone https://github.com/gabime/spdlog.git\n    cd spdlog && mkdir build && cd build\n    cmake .. && cmake --build .\n    ```\n\nTesting:\n- Benchmarks are described in `bench/bench.cpp`.\n- No explicit test commands or test frameworks (e.g., GTest, Catch2) are mentioned in the README. The `cmake --build .` command for building the project might include building benchmark executables.', 'Get File Info', True)
2025-07-01 11:12:22.636 | INFO     | entering browse
2025-07-01 11:12:22.637 | INFO     | #include "includes.h"

static const char *const tested_logger_name = "null_logger";
static const char *const tested_logger_name2 = "null_logger2";

#ifndef SPDLOG_NO_EXCEPTIONS
TEST_CASE("register_drop", "[registry]") {
    spdlog::drop_all();
    spdlog::create<spdlog::sinks::null_sink_mt>(tested_logger_name);
    REQUIRE(spdlog::get(tested_logger_name) != nullptr);
    // Throw if registering existing name
    REQUIRE_THROWS_AS(spdlog::create<spdlog::sinks::null_sink_mt>(tested_logger_name),
                      spdlog::spdlog_ex);
}

TEST_CASE("explicit register", "[registry]") {
    spdlog::drop_all();
    auto logger = std::make_shared<spdlog::logger>(tested_logger_name,
                                                   std::make_shared<spdlog::sinks::null_sink_st>());
    spdlog::register_logger(logger);
    REQUIRE(spdlog::get(tested_logger_name) != nullptr);
    // Throw if registering existing name
    REQUIRE_THROWS_AS(spdlog::create<spdlog::sinks::null_sink_mt>(tested_logger_name),
                      spdlog::spdlog_ex);
}
#endif

TEST_CASE("apply_all", "[registry]") {
    spdlog::drop_all();
    auto logger = std::make_shared<spdlog::logger>(tested_logger_name,
                                                   std::make_shared<spdlog::sinks::null_sink_st>());
    spdlog::register_logger(logger);
    auto logger2 = std::make_shared<spdlog::logger>(
        tested_logger_name2, std::make_shared<spdlog::sinks::null_sink_st>());
    spdlog::register_logger(logger2);

    int counter = 0;
    spdlog::apply_all([&counter](std::shared_ptr<spdlog::logger>) { counter++; });
    REQUIRE(counter == 2);

    counter = 0;
    spdlog::drop(tested_logger_name2);
    spdlog::apply_all([&counter](std::shared_ptr<spdlog::logger> l) {
        REQUIRE(l->name() == tested_logger_name);
        counter++;
    });
    REQUIRE(counter == 1);
}

TEST_CASE("drop", "[registry]") {
    spdlog::drop_all();
    spdlog::create<spdlog::sinks::null_sink_mt>(tested_logger_name);
    spdlog::drop(tested_logger_name);
    REQUIRE_FALSE(spdlog::get(tested_logger_name));
}

TEST_CASE("drop-default", "[registry]") {
    spdlog::set_default_logger(spdlog::null_logger_st(tested_logger_name));
    spdlog::drop(tested_logger_name);
    REQUIRE_FALSE(spdlog::default_logger());
    REQUIRE_FALSE(spdlog::get(tested_logger_name));
}

TEST_CASE("drop_all", "[registry]") {
    spdlog::drop_all();
    spdlog::create<spdlog::sinks::null_sink_mt>(tested_logger_name);
    spdlog::create<spdlog::sinks::null_sink_mt>(tested_logger_name2);
    spdlog::drop_all();
    REQUIRE_FALSE(spdlog::get(tested_logger_name));
    REQUIRE_FALSE(spdlog::get(tested_logger_name2));
    REQUIRE_FALSE(spdlog::default_logger());
}

TEST_CASE("drop non existing", "[registry]") {
    spdlog::drop_all();
    spdlog::create<spdlog::sinks::null_sink_mt>(tested_logger_name);
    spdlog::drop("some_name");
    REQUIRE_FALSE(spdlog::get("some_name"));
    REQUIRE(spdlog::get(tested_logger_name));
    spdlog::drop_all();
}

TEST_CASE("default logger", "[registry]") {
    spdlog::drop_all();
    spdlog::set_default_logger(spdlog::null_logger_st(tested_logger_name));
    REQUIRE(spdlog::get(tested_logger_name) == spdlog::default_logger());
    spdlog::drop_all();
}

TEST_CASE("set_default_logger(nullptr)", "[registry]") {
    spdlog::set_default_logger(nullptr);
    REQUIRE_FALSE(spdlog::default_logger());
}

TEST_CASE("disable automatic registration", "[registry]") {
    // set some global parameters
    spdlog::level::level_enum log_level = spdlog::level::level_enum::warn;
    spdlog::set_level(log_level);
    // but disable automatic registration
    spdlog::set_automatic_registration(false);
    auto logger1 = spdlog::create<spdlog::sinks::daily_file_sink_st>(
        tested_logger_name, SPDLOG_FILENAME_T("filename"), 11, 59);
    auto logger2 = spdlog::create_async<spdlog::sinks::stdout_color_sink_mt>(tested_logger_name2);
    // loggers should not be part of the registry
    REQUIRE_FALSE(spdlog::get(tested_logger_name));
    REQUIRE_FALSE(spdlog::get(tested_logger_name2));
    // but make sure they are still initialized according to global defaults
    REQUIRE(logger1->level() == log_level);
    REQUIRE(logger2->level() == log_level);
    spdlog::set_level(spdlog::level::info);
    spdlog::set_automatic_registration(true);
}

2025-07-01 11:12:22.638 | DEBUG    | Analyzing file content. Try 1 of 3
2025-07-01 11:12:25.856 | INFO     | Model API request cost info: input_tokens=1757, output_tokens=242, cost=0.006813
2025-07-01 11:12:25.859 | SUCCESS  | Successfully extracted environment config
2025-07-01 11:12:25.860 | INFO     | ******
2025-07-01 11:12:25.860 | INFO     | Testing:
- Test framework: Catch2 (indicated by `TEST_CASE` and `REQUIRE` macros)
- Test suite file: `testbed/gabime__spdlog-3398_2025-07-01_10-49-28/tests/test_registry.cpp`

Custom query: Test cases and their Catch2 tags:
- `TEST_CASE("register_drop", "[registry]")`
- `TEST_CASE("explicit register", "[registry]")`
- `TEST_CASE("apply_all", "[registry]")`
- `TEST_CASE("drop", "[registry]")`
- `TEST_CASE("drop-default", "[registry]")`
- `TEST_CASE("drop_all", "[registry]")`
- `TEST_CASE("drop non existing", "[registry]")`
- `TEST_CASE("default logger", "[registry]")`
- `TEST_CASE("set_default_logger(nullptr)", "[registry]")`
- `TEST_CASE("disable automatic registration", "[registry]")`
2025-07-01 11:12:25.861 | INFO     | ******
2025-07-01 11:12:25.861 | DEBUG    | Result of dispatch_intent: ('Testing:\n- Test framework: Catch2 (indicated by `TEST_CASE` and `REQUIRE` macros)\n- Test suite file: `testbed/gabime__spdlog-3398_2025-07-01_10-49-28/tests/test_registry.cpp`\n\nCustom query: Test cases and their Catch2 tags:\n- `TEST_CASE("register_drop", "[registry]")`\n- `TEST_CASE("explicit register", "[registry]")`\n- `TEST_CASE("apply_all", "[registry]")`\n- `TEST_CASE("drop", "[registry]")`\n- `TEST_CASE("drop-default", "[registry]")`\n- `TEST_CASE("drop_all", "[registry]")`\n- `TEST_CASE("drop non existing", "[registry]")`\n- `TEST_CASE("default logger", "[registry]")`\n- `TEST_CASE("set_default_logger(nullptr)", "[registry]")`\n- `TEST_CASE("disable automatic registration", "[registry]")`', 'Get File Info', True)
2025-07-01 11:12:51.862 | INFO     | Model API request cost info: input_tokens=2851, output_tokens=650, cost=0.013628
2025-07-01 11:13:01.285 | INFO     | Model API request cost info: input_tokens=3600, output_tokens=485, cost=0.013850
2025-07-01 11:13:01.328 | DEBUG    | Trying to select search APIs in json. Try 1 of 5.
2025-07-01 11:13:04.127 | INFO     | Model API request cost info: input_tokens=1152, output_tokens=394, cost=0.006820
2025-07-01 11:13:04.131 | DEBUG    | {
  "API_calls": [],
  "collected_information": "Repository Type: A C++ project using CMake as its build system.\nBase OS for Dockerfile: A Linux distribution, specifically ubuntu:22.04, is a suitable choice given the common dependencies and build tools.\nSystem Dependencies: build-essential (for C++ compiler like g++, make), cmake (for building), and git (for cloning, although already cloned) are required system-level packages. These can be installed via apt.\nC++ Standard: The project requires at least C++11.\nBuild Process:\nThe project is built using CMake.\nThe standard build steps involve creating a build directory, configuring CMake, and then building.\nCrucially, to enable building tests, the CMake option -DSPDLOG_BUILD_TESTS=ON must be passed during the configuration step.\nThe build commands are: mkdir build, cd build, cmake .. -DSPDLOG_BUILD_TESTS=ON, cmake --build .. .\nTest Framework: Catch2 is identified as the testing framework used, specifically indicated by TEST_CASE macros in tests/test_registry.cpp.\nTest Runner: Tests are integrated with and run via ctest, CMake's testing utility.\nTest Execution Command: After building, tests can be executed from the build directory using ctest --output-on-failure. This command will run all tests that were built, including tests/test_registry.cpp.\nSpecific Test File Context: The target file tests/test_registry.cpp contains multiple TEST_CASE definitions, all tagged with [registry]. While explicit ctest filtering by Catch2 tags wasn't fully detailed (as it depends on add_test configurations in tests/CMakeLists.txt), running ctest broadly is robust enough to include and execute this specific file's tests.",
  "terminate": true
}
2025-07-01 11:13:04.131 | DEBUG    | Extracted a valid json
2025-07-01 11:13:04.142 | INFO     | Trying to extract a eval script. Try 1 of 3.
2025-07-01 11:13:22.456 | INFO     | Model API request cost info: input_tokens=4339, output_tokens=375, cost=0.014598
2025-07-01 11:13:22.459 | INFO     | Raw script and produced in try 1. Writing script into file.
2025-07-01 11:18:11.738 | DEBUG    | Result of dispatch_intent: ('Image built successfully!\nContainer 8fabe7acd0ba6ded98f3ff1993e5c5c574aace0d52425d4a5b9b762aea37a98a started.\nPatch applied successfully.\nNote: Git diff changed after test execution.\nFind test_output.txt! Waiting for analysis. ', 'Docker image gabime__spdlog-3398-dockerfile2:latest built successfully.\nContainer started.\nPatch applied.\nGit diff changed.\nObtain test results successfully.', True)
2025-07-01 11:18:11.747 | DEBUG    | Trying to analyze the test log. Try 1 of 3.
2025-07-01 11:18:21.059 | INFO     | Model API request cost info: input_tokens=1976, output_tokens=62, cost=0.005560
2025-07-01 11:18:21.062 | DEBUG    | {
    "is_finish": true,
    "guidance_for_write_dockerfile_agent": "",
    "guidance_for_write_eval_script_agent": "",
    "guidance_for_context_retrieval_agent": ""
}
2025-07-01 11:18:21.062 | DEBUG    | Extracted a valid json
2025-07-01 11:18:21.146 | INFO     | Removed project repository at testbed/gabime__spdlog-3398_2025-07-01_10-49-28
2025-07-01 11:18:21.156 | INFO     | Task gabime__spdlog-3398 completed successfully.
