{
    "task_id": "gabime__spdlog-3366",
    "setup_info": {
        "repo_path": "testbed/gabime__spdlog-3366_2025-07-01_10-45-48",
        "repo_cache_path": "testbed/gabime/spdlog_cache"
    },
    "task_info": {
        "repo": "gabime/spdlog",
        "pull_number": 3366,
        "instance_id": "gabime__spdlog-3366",
        "issue_numbers": [
            "3352"
        ],
        "base_commit": "faa0a7a9c5a3550ed5461fab7d8e31c37fd1a2ef",
        "patch": "diff --git a/include/spdlog/details/os-inl.h b/include/spdlog/details/os-inl.h\n--- a/include/spdlog/details/os-inl.h\n+++ b/include/spdlog/details/os-inl.h\n@@ -267,7 +267,8 @@ SPDLOG_INLINE int utc_minutes_offset(const std::tm &tm) {\n \n     #if defined(sun) || defined(__sun) || defined(_AIX) || \\\n         (defined(__NEWLIB__) && !defined(__TM_GMTOFF)) ||  \\\n-        (!defined(_BSD_SOURCE) && !defined(_GNU_SOURCE))\n+        (!defined(__APPLE__) && !defined(_BSD_SOURCE) && !defined(_GNU_SOURCE) && \\\n+            (!defined(_POSIX_VERSION) || (_POSIX_VERSION < 202405L)))\n     // 'tm_gmtoff' field is BSD extension and it's missing on SunOS/Solaris\n     struct helper {\n         static long int calculate_gmt_offset(const std::tm &localtm = details::os::localtime(),\n",
        "test_patch": "diff --git a/tests/test_pattern_formatter.cpp b/tests/test_pattern_formatter.cpp\n--- a/tests/test_pattern_formatter.cpp\n+++ b/tests/test_pattern_formatter.cpp\n@@ -1,6 +1,8 @@\n #include \"includes.h\"\n #include \"test_sink.h\"\n \n+#include <chrono>\n+\n using spdlog::memory_buf_t;\n using spdlog::details::to_string_view;\n \n@@ -19,6 +21,21 @@ static std::string log_to_str(const std::string &msg, const Args &...args) {\n     return oss.str();\n }\n \n+// log to str and return it with time\n+template <typename... Args>\n+static std::string log_to_str_with_time(spdlog::log_clock::time_point log_time, const std::string &msg, const Args &...args) {\n+    std::ostringstream oss;\n+    auto oss_sink = std::make_shared<spdlog::sinks::ostream_sink_mt>(oss);\n+    spdlog::logger oss_logger(\"pattern_tester\", oss_sink);\n+    oss_logger.set_level(spdlog::level::info);\n+\n+    oss_logger.set_formatter(\n+        std::unique_ptr<spdlog::formatter>(new spdlog::pattern_formatter(args...)));\n+\n+    oss_logger.log(log_time, {}, spdlog::level::info, msg);\n+    return oss.str();\n+}\n+\n TEST_CASE(\"custom eol\", \"[pattern_formatter]\") {\n     std::string msg = \"Hello custom eol test\";\n     std::string eol = \";)\";\n@@ -58,6 +75,15 @@ TEST_CASE(\"date MM/DD/YY \", \"[pattern_formatter]\") {\n             oss.str());\n }\n \n+TEST_CASE(\"GMT offset \", \"[pattern_formatter]\") {\n+    using namespace std::chrono_literals;\n+    const auto now = std::chrono::system_clock::now();\n+    const auto yesterday = now - 24h;\n+\n+    REQUIRE(log_to_str_with_time(yesterday, \"Some message\", \"%z\", spdlog::pattern_time_type::utc, \"\\n\") ==\n+            \"+00:00\\n\");\n+}\n+\n TEST_CASE(\"color range test1\", \"[pattern_formatter]\") {\n     auto formatter = std::make_shared<spdlog::pattern_formatter>(\n         \"%^%v%$\", spdlog::pattern_time_type::local, \"\\n\");\n",
        "problem_statement": "Missing test for __APPLE__ chooses buggy SunOS/Solaris workaround in utc_minutes_offset\nspdlog uses the function `utc_minutes_offset` in the `z_formatter` to format the `'%z'`-part of a format string (UTC-offset) when logging time. The function has three implementations, one of which is chosen at compile time via marcro defines (Windows, SunOS/Solaris, default):\n\nhttps://github.com/gabime/spdlog/blob/3335c380a08c5e0f5117a66622df6afdb3d74959/include/spdlog/details/os-inl.h#L268-L271\n\nThis test doesn't detect Apple platforms, which have had the `tm_gmtoff`-field at least since [Mac OS X 10.0](https://developer.apple.com/library/archive/documentation/System/Conceptual/ManPages_iPhoneOS/man3/ctime.3.html), and also doesn't detect [POSIX.1-2024](https://pubs.opengroup.org/onlinepubs/9799919799/basedefs/time.h.html) conforming systems, which are also required to support `tm_gmtoff`.\n\nOn Apple and POSIX1.-2024 platforms, this has the unfortunate effect to use the SunOS/Solaris fallback, which doesn't compute the correct value if the passed value of `tm` isn't the current system time, i.e. `localtime(::time())` (#3351).\n\nI suggest to fix this by changing the test to something like\n```c++\n    #if defined(sun) || defined(__sun) || defined(_AIX) || \\\n        (defined(__NEWLIB__) && !defined(__TM_GMTOFF)) ||  \\\n        (!defined(__APPLE__) && !defined(_BSD_SOURCE) && !defined(_GNU_SOURCE) && \\\n            (!defined(_POSIX_VERSION) || (_POSIX_VERSION < 202405L)))\n    // 'tm_gmtoff' field is BSD extension and it's missing on SunOS/Solaris\n```\n",
        "hints_text": "Thanks for the report. Is there a test that can be added to tests/ to reproduce this?\nPR is always welcome.",
        "created_at": "2025-03-29T10:10:34Z",
        "version": "1.15"
    }
}