{
    "task_id": "gabime__spdlog-375",
    "setup_info": {
        "repo_path": "testbed/gabime__spdlog-375_2025-06-30_12-10-16",
        "repo_cache_path": "testbed/gabime/spdlog_cache"
    },
    "task_info": {
        "repo": "gabime/spdlog",
        "pull_number": 375,
        "instance_id": "gabime__spdlog-375",
        "issue_numbers": [
            "333"
        ],
        "base_commit": "d7a8db8f6357856c7ac1eb3bde1f3a90a9ab9e0c",
        "patch": "diff --git a/example/example.cpp b/example/example.cpp\n--- a/example/example.cpp\n+++ b/example/example.cpp\n@@ -39,7 +39,7 @@ int main(int, char*[])\n \n \n         // Create basic file logger (not rotated)\n-        auto my_logger = spd::basic_logger_mt(\"basic_logger\", \"logs/basic.txt\");\n+        auto my_logger = spd::basic_logger_mt(\"basic_logger\", \"logs/basic\");\n         my_logger->info(\"Some log message\");\n \n         // Create a file rotating logger with 5mb size max and 3 rotated files\n@@ -106,7 +106,7 @@ void async_example()\n {\n     size_t q_size = 4096; //queue size must be power of 2\n     spdlog::set_async_mode(q_size);\n-    auto async_file = spd::daily_logger_st(\"async_file_logger\", \"logs/async_log.txt\");\n+    auto async_file = spd::daily_logger_st(\"async_file_logger\", \"logs/async_log\");\n \n     for (int i = 0; i < 100; ++i)\n         async_file->info(\"Async message #{}\", i);\ndiff --git a/include/spdlog/details/spdlog_impl.h b/include/spdlog/details/spdlog_impl.h\n--- a/include/spdlog/details/spdlog_impl.h\n+++ b/include/spdlog/details/spdlog_impl.h\n@@ -61,23 +61,23 @@ inline std::shared_ptr<spdlog::logger> spdlog::basic_logger_st(const std::string\n // Create multi/single threaded rotating file logger\n inline std::shared_ptr<spdlog::logger> spdlog::rotating_logger_mt(const std::string& logger_name, const filename_t& filename, size_t max_file_size, size_t max_files)\n {\n-    return create<spdlog::sinks::rotating_file_sink_mt>(logger_name, filename, SPDLOG_FILENAME_T(\"txt\"), max_file_size, max_files);\n+    return create<spdlog::sinks::rotating_file_sink_mt>(logger_name, filename, max_file_size, max_files);\n }\n \n inline std::shared_ptr<spdlog::logger> spdlog::rotating_logger_st(const std::string& logger_name, const filename_t& filename, size_t max_file_size, size_t max_files)\n {\n-    return create<spdlog::sinks::rotating_file_sink_st>(logger_name, filename, SPDLOG_FILENAME_T(\"txt\"), max_file_size, max_files);\n+    return create<spdlog::sinks::rotating_file_sink_st>(logger_name, filename, max_file_size, max_files);\n }\n \n // Create file logger which creates new file at midnight):\n inline std::shared_ptr<spdlog::logger> spdlog::daily_logger_mt(const std::string& logger_name, const filename_t& filename, int hour, int minute)\n {\n-    return create<spdlog::sinks::daily_file_sink_mt>(logger_name, filename, SPDLOG_FILENAME_T(\"txt\"), hour, minute);\n+    return create<spdlog::sinks::daily_file_sink_mt>(logger_name, filename, hour, minute);\n }\n \n inline std::shared_ptr<spdlog::logger> spdlog::daily_logger_st(const std::string& logger_name, const filename_t& filename, int hour, int minute)\n {\n-    return create<spdlog::sinks::daily_file_sink_st>(logger_name, filename, SPDLOG_FILENAME_T(\"txt\"), hour, minute);\n+    return create<spdlog::sinks::daily_file_sink_st>(logger_name, filename, hour, minute);\n }\n \n \ndiff --git a/include/spdlog/sinks/file_sinks.h b/include/spdlog/sinks/file_sinks.h\n--- a/include/spdlog/sinks/file_sinks.h\n+++ b/include/spdlog/sinks/file_sinks.h\n@@ -64,16 +64,15 @@ template<class Mutex>\n class rotating_file_sink : public base_sink < Mutex >\n {\n public:\n-    rotating_file_sink(const filename_t &base_filename, const filename_t &extension,\n-                       std::size_t max_size, std::size_t max_files                       ) :\n+    rotating_file_sink(const filename_t &base_filename,\n+                       std::size_t max_size, std::size_t max_files) :\n         _base_filename(base_filename),\n-        _extension(extension),\n         _max_size(max_size),\n         _max_files(max_files),\n         _current_size(0),\n         _file_helper()\n     {\n-        _file_helper.open(calc_filename(_base_filename, 0, _extension));\n+        _file_helper.open(calc_filename(_base_filename, 0));\n         _current_size = _file_helper.size(); //expensive. called only once\n     }\n \n@@ -95,21 +94,21 @@ class rotating_file_sink : public base_sink < Mutex >\n     }\n \n private:\n-    static filename_t calc_filename(const filename_t& filename, std::size_t index, const filename_t& extension)\n+    static filename_t calc_filename(const filename_t& filename, std::size_t index)\n     {\n         std::conditional<std::is_same<filename_t::value_type, char>::value, fmt::MemoryWriter, fmt::WMemoryWriter>::type w;\n         if (index)\n-            w.write(SPDLOG_FILENAME_T(\"{}.{}.{}\"), filename, index, extension);\n+            w.write(SPDLOG_FILENAME_T(\"{}.{}\"), filename, index);\n         else\n-            w.write(SPDLOG_FILENAME_T(\"{}.{}\"), filename, extension);\n+            w.write(SPDLOG_FILENAME_T(\"{}\"), filename);\n         return w.str();\n     }\n \n     // Rotate files:\n-    // log.txt -> log.1.txt\n-    // log.1.txt -> log2.txt\n-    // log.2.txt -> log3.txt\n-    // log.3.txt -> delete\n+    // log.txt -> log.txt.1\n+    // log.txt.1 -> log.txt.2\n+    // log.txt.2 -> log.txt.3\n+    // lo3.txt.3 -> delete\n \n     void _rotate()\n     {\n@@ -117,8 +116,8 @@ class rotating_file_sink : public base_sink < Mutex >\n         _file_helper.close();\n         for (auto i = _max_files; i > 0; --i)\n         {\n-            filename_t src = calc_filename(_base_filename, i - 1, _extension);\n-            filename_t target = calc_filename(_base_filename, i, _extension);\n+            filename_t src = calc_filename(_base_filename, i - 1);\n+            filename_t target = calc_filename(_base_filename, i);\n \n             if (details::file_helper::file_exists(target))\n             {\n@@ -135,7 +134,6 @@ class rotating_file_sink : public base_sink < Mutex >\n         _file_helper.reopen(true);\n     }\n     filename_t _base_filename;\n-    filename_t _extension;\n     std::size_t _max_size;\n     std::size_t _max_files;\n     std::size_t _current_size;\n@@ -150,27 +148,27 @@ typedef rotating_file_sink<details::null_mutex>rotating_file_sink_st;\n  */\n struct default_daily_file_name_calculator\n {\n-    // Create filename for the form basename.YYYY-MM-DD_hh-mm.extension\n-    static filename_t calc_filename(const filename_t& basename, const filename_t& extension)\n+    // Create filename for the form basename.YYYY-MM-DD_hh-mm\n+    static filename_t calc_filename(const filename_t& basename)\n     {\n         std::tm tm = spdlog::details::os::localtime();\n         std::conditional<std::is_same<filename_t::value_type, char>::value, fmt::MemoryWriter, fmt::WMemoryWriter>::type w;\n-        w.write(SPDLOG_FILENAME_T(\"{}_{:04d}-{:02d}-{:02d}_{:02d}-{:02d}.{}\"), basename, tm.tm_year + 1900, tm.tm_mon + 1, tm.tm_mday, tm.tm_hour, tm.tm_min, extension);\n+        w.write(SPDLOG_FILENAME_T(\"{}_{:04d}-{:02d}-{:02d}_{:02d}-{:02d}\"), basename, tm.tm_year + 1900, tm.tm_mon + 1, tm.tm_mday, tm.tm_hour, tm.tm_min);\n         return w.str();\n     }\n };\n \n /*\n- * Generator of daily log file names in format basename.YYYY-MM-DD.extension\n+ * Generator of daily log file names in format basename.YYYY-MM-DD\n  */\n struct dateonly_daily_file_name_calculator\n {\n-    // Create filename for the form basename.YYYY-MM-DD.extension\n-    static filename_t calc_filename(const filename_t& basename, const filename_t& extension)\n+    // Create filename for the form basename.YYYY-MM-DD\n+    static filename_t calc_filename(const filename_t& basename)\n     {\n         std::tm tm = spdlog::details::os::localtime();\n         std::conditional<std::is_same<filename_t::value_type, char>::value, fmt::MemoryWriter, fmt::WMemoryWriter>::type w;\n-        w.write(SPDLOG_FILENAME_T(\"{}_{:04d}-{:02d}-{:02d}.{}\"), basename, tm.tm_year + 1900, tm.tm_mon + 1, tm.tm_mday, extension);\n+        w.write(SPDLOG_FILENAME_T(\"{}_{:04d}-{:02d}-{:02d}\"), basename, tm.tm_year + 1900, tm.tm_mon + 1, tm.tm_mday);\n         return w.str();\n     }\n };\n@@ -185,17 +183,15 @@ class daily_file_sink :public base_sink < Mutex >\n     //create daily file sink which rotates on given time\n     daily_file_sink(\n         const filename_t& base_filename,\n-        const filename_t& extension,\n         int rotation_hour,\n         int rotation_minute) : _base_filename(base_filename),\n-        _extension(extension),\n         _rotation_h(rotation_hour),\n         _rotation_m(rotation_minute)\n     {\n         if (rotation_hour < 0 || rotation_hour > 23 || rotation_minute < 0 || rotation_minute > 59)\n             throw spdlog_ex(\"daily_file_sink: Invalid rotation time in ctor\");\n         _rotation_tp = _next_rotation_tp();\n-        _file_helper.open(FileNameCalc::calc_filename(_base_filename, _extension));\n+        _file_helper.open(FileNameCalc::calc_filename(_base_filename));\n     }\n \n     void flush() override\n@@ -208,7 +204,7 @@ class daily_file_sink :public base_sink < Mutex >\n     {\n         if (std::chrono::system_clock::now() >= _rotation_tp)\n         {\n-            _file_helper.open(FileNameCalc::calc_filename(_base_filename, _extension));\n+            _file_helper.open(FileNameCalc::calc_filename(_base_filename));\n             _rotation_tp = _next_rotation_tp();\n         }\n         _file_helper.write(msg);\n@@ -231,7 +227,6 @@ class daily_file_sink :public base_sink < Mutex >\n     }\n \n     filename_t _base_filename;\n-    filename_t _extension;\n     int _rotation_h;\n     int _rotation_m;\n     std::chrono::system_clock::time_point _rotation_tp;\ndiff --git a/include/spdlog/spdlog.h b/include/spdlog/spdlog.h\n--- a/include/spdlog/spdlog.h\n+++ b/include/spdlog/spdlog.h\n@@ -124,7 +124,7 @@ std::shared_ptr<logger> create(const std::string& logger_name, const It& sinks_b\n \n // Create and register a logger with templated sink type\n // Example:\n-// spdlog::create<daily_file_sink_st>(\"mylog\", \"dailylog_filename\", \"txt\");\n+// spdlog::create<daily_file_sink_st>(\"mylog\", \"dailylog_filename\");\n template <typename Sink, typename... Args>\n std::shared_ptr<spdlog::logger> create(const std::string& logger_name, Args...);\n \n",
        "test_patch": "diff --git a/tests/file_log.cpp b/tests/file_log.cpp\n--- a/tests/file_log.cpp\n+++ b/tests/file_log.cpp\n@@ -7,7 +7,7 @@\n TEST_CASE(\"simple_file_logger\", \"[simple_logger]]\")\n {\n     prepare_logdir();\n-    std::string filename = \"logs/simple_log.txt\";\n+    std::string filename = \"logs/simple_log\";\n \n     auto logger = spdlog::create<spdlog::sinks::simple_file_sink_mt>(\"logger\", filename);\n     logger->set_pattern(\"%v\");\n@@ -24,7 +24,7 @@ TEST_CASE(\"simple_file_logger\", \"[simple_logger]]\")\n TEST_CASE(\"flush_on\", \"[flush_on]]\")\n {\n     prepare_logdir();\n-    std::string filename = \"logs/simple_log.txt\";\n+    std::string filename = \"logs/simple_log\";\n \n     auto logger = spdlog::create<spdlog::sinks::simple_file_sink_mt>(\"logger\", filename);\n     logger->set_pattern(\"%v\");\n@@ -50,7 +50,7 @@ TEST_CASE(\"rotating_file_logger1\", \"[rotating_logger]]\")\n         logger->info(\"Test message {}\", i);\n \n     logger->flush();\n-    auto filename = basename + \".txt\";\n+    auto filename = basename;\n     REQUIRE(count_lines(filename) == 10);\n }\n \n@@ -64,14 +64,14 @@ TEST_CASE(\"rotating_file_logger2\", \"[rotating_logger]]\")\n         logger->info(\"Test message {}\", i);\n \n     logger->flush();\n-    auto filename = basename + \".txt\";\n+    auto filename = basename;\n     REQUIRE(count_lines(filename) == 10);\n     for (int i = 0; i < 1000; i++)\n         logger->info(\"Test message {}\", i);\n \n     logger->flush();\n     REQUIRE(get_filesize(filename) <= 1024);\n-    auto filename1 = basename + \".1.txt\";\n+    auto filename1 = basename + \".1\";\n     REQUIRE(get_filesize(filename1) <= 1024);\n }\n \n@@ -83,7 +83,7 @@ TEST_CASE(\"daily_logger\", \"[daily_logger]]\")\n     std::string basename = \"logs/daily_log\";\n     std::tm tm = spdlog::details::os::localtime();\n     fmt::MemoryWriter w;\n-    w.write(\"{}_{:04d}-{:02d}-{:02d}_{:02d}-{:02d}.txt\", basename, tm.tm_year + 1900, tm.tm_mon + 1, tm.tm_mday, tm.tm_hour, tm.tm_min);\n+    w.write(\"{}_{:04d}-{:02d}-{:02d}_{:02d}-{:02d}\", basename, tm.tm_year + 1900, tm.tm_mon + 1, tm.tm_mday, tm.tm_hour, tm.tm_min);\n \n     auto logger = spdlog::daily_logger_mt(\"logger\", basename, 0, 0);\n     logger->flush_on(spdlog::level::info);\n@@ -106,9 +106,9 @@ TEST_CASE(\"daily_logger with dateonly calculator\", \"[daily_logger_dateonly]]\")\n     std::string basename = \"logs/daily_dateonly\";\n     std::tm tm = spdlog::details::os::localtime();\n     fmt::MemoryWriter w;\n-    w.write(\"{}_{:04d}-{:02d}-{:02d}.txt\", basename, tm.tm_year + 1900, tm.tm_mon + 1, tm.tm_mday);\n+    w.write(\"{}_{:04d}-{:02d}-{:02d}\", basename, tm.tm_year + 1900, tm.tm_mon + 1, tm.tm_mday);\n \n-    auto logger = spdlog::create<sink_type>(\"logger\", basename, \"txt\", 0, 0);\n+    auto logger = spdlog::create<sink_type>(\"logger\", basename, 0, 0);\n     for (int i = 0; i < 10; ++i)\n         logger->info(\"Test message {}\", i);\n     logger->flush();\n@@ -118,11 +118,11 @@ TEST_CASE(\"daily_logger with dateonly calculator\", \"[daily_logger_dateonly]]\")\n \n struct custom_daily_file_name_calculator\n {\n-    static spdlog::filename_t calc_filename(const spdlog::filename_t& basename, const spdlog::filename_t& extension)\n+    static spdlog::filename_t calc_filename(const spdlog::filename_t& basename)\n     {\n         std::tm tm = spdlog::details::os::localtime();\n         fmt::MemoryWriter w;\n-        w.write(\"{}{:04d}{:02d}{:02d}.{}\", basename, tm.tm_year + 1900, tm.tm_mon + 1, tm.tm_mday, extension);\n+        w.write(\"{}{:04d}{:02d}{:02d}\", basename, tm.tm_year + 1900, tm.tm_mon + 1, tm.tm_mday);\n         return w.str();\n     }\n };\n@@ -138,9 +138,9 @@ TEST_CASE(\"daily_logger with custom calculator\", \"[daily_logger_custom]]\")\n     std::string basename = \"logs/daily_dateonly\";\n     std::tm tm = spdlog::details::os::localtime();\n     fmt::MemoryWriter w;\n-    w.write(\"{}{:04d}{:02d}{:02d}.txt\", basename, tm.tm_year + 1900, tm.tm_mon + 1, tm.tm_mday);\n+    w.write(\"{}{:04d}{:02d}{:02d}\", basename, tm.tm_year + 1900, tm.tm_mon + 1, tm.tm_mday);\n \n-    auto logger = spdlog::create<sink_type>(\"logger\", basename, \"txt\", 0, 0);\n+    auto logger = spdlog::create<sink_type>(\"logger\", basename, 0, 0);\n     for (int i = 0; i < 10; ++i)\n         logger->info(\"Test message {}\", i);\n \n",
        "problem_statement": "Unexpected appending of \"txt\" at the end of a log filename\nI was confused by the usage of the filename parameter for `rotating_logger_mt`. It's called `filename`, so I interpreted that as being the absolute path to the file. Instead, it seems like `.txt` is appended onto the end of whatever is provided, so I ended up getting something like `mylog.txt.txt`. Is there a reason that the extension is hardcoded to `.txt`? Why not allow the entire filename to be specified by the caller?\r\n\r\nAs a result of this behaviour, I have to implement two functions in my code: one to output the desired log filename *without* an extension (to provide to `spdlog`), and one to output the log filename *with* an extension (when I want to operate on the log file myself).\n",
        "hints_text": "+1\nThe intention was to try to keep the extension for the rotated files. Maybe this it is not really needed (i.e. rotated log files would be just named log.txt.1, log.txt.2) and maybe there is a better way to achieve this. I will happy to consider alternative ways.\r\n\r\nA possible fix would be to ignore the extension if it is empty string\r\n\r\n\nhi @gabime , looking shortly into my /var/log - most logs just add number on the end of file i.e.\r\n<pre>\r\nfilename.ext\r\nfilename.ext.0\r\nfilename.ext.1\r\nfilename.ext.2\r\n</pre>\r\neventuelly, extra suffix is for rotated/compressed file i.e.:\r\n<pre>\r\nfilename.ext\r\nfilename.ext.0.xz\r\nfilename.ext.1.xz\r\nfilename.ext.2.xz\r\n</pre>\r\n\r\nI vote for rotating file and let user use plain filename or filename with extension.\nYes, I think you are right. It would also simplify things a little which is always good..\nI can try create a PR  (?)\nSure. Please do",
        "created_at": "2017-02-28T00:01:12Z",
        "version": "0.12"
    }
}