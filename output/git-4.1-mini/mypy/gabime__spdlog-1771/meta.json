{
    "task_id": "gabime__spdlog-1771",
    "setup_info": {
        "repo_path": "testbed/gabime__spdlog-1771_2025-06-30_12-10-16",
        "repo_cache_path": "testbed/gabime/spdlog_cache"
    },
    "task_info": {
        "repo": "gabime/spdlog",
        "pull_number": 1771,
        "instance_id": "gabime__spdlog-1771",
        "issue_numbers": [
            "1770"
        ],
        "base_commit": "adcfb7fb558cb2d3435f5d20edec2a61a5340361",
        "patch": "diff --git a/include/spdlog/sinks/wincolor_sink-inl.h b/include/spdlog/sinks/wincolor_sink-inl.h\n--- a/include/spdlog/sinks/wincolor_sink-inl.h\n+++ b/include/spdlog/sinks/wincolor_sink-inl.h\n@@ -7,22 +7,30 @@\n #include <spdlog/sinks/wincolor_sink.h>\n #endif\n \n+#include <spdlog/details/windows_include.h>\n+#include <wincon.h>\n+\n #include <spdlog/common.h>\n #include <spdlog/pattern_formatter.h>\n \n namespace spdlog {\n namespace sinks {\n-\n template<typename ConsoleMutex>\n-SPDLOG_INLINE wincolor_sink<ConsoleMutex>::wincolor_sink(HANDLE out_handle, color_mode mode)\n-    : out_handle_(out_handle)\n+SPDLOG_INLINE wincolor_sink<ConsoleMutex>::wincolor_sink(void *out_handle, color_mode mode)\n+    : BOLD(FOREGROUND_INTENSITY)\n+    , RED(FOREGROUND_RED)\n+    , GREEN(FOREGROUND_GREEN)\n+    , CYAN(FOREGROUND_GREEN | FOREGROUND_BLUE)\n+    , WHITE(FOREGROUND_RED | FOREGROUND_GREEN | FOREGROUND_BLUE)\n+    , YELLOW(FOREGROUND_RED | FOREGROUND_GREEN)\n+    , out_handle_(out_handle)\n     , mutex_(ConsoleMutex::mutex())\n     , formatter_(details::make_unique<spdlog::pattern_formatter>())\n {\n     // check if out_handle is points to the actual console.\n     // ::GetConsoleMode() should return 0 if it is redirected or not valid console handle.\n     DWORD console_mode;\n-    in_console_ = ::GetConsoleMode(out_handle, &console_mode) != 0;\n+    in_console_ = ::GetConsoleMode(static_cast<HANDLE>(out_handle_), &console_mode) != 0;\n \n     set_color_mode(mode);\n     colors_[level::trace] = WHITE;\n@@ -42,7 +50,7 @@ SPDLOG_INLINE wincolor_sink<ConsoleMutex>::~wincolor_sink()\n \n // change the color for the given level\n template<typename ConsoleMutex>\n-void SPDLOG_INLINE wincolor_sink<ConsoleMutex>::set_color(level::level_enum level, WORD color)\n+void SPDLOG_INLINE wincolor_sink<ConsoleMutex>::set_color(level::level_enum level, std::uint16_t color)\n {\n     std::lock_guard<mutex_t> lock(mutex_);\n     colors_[level] = color;\n@@ -67,10 +75,10 @@ void SPDLOG_INLINE wincolor_sink<ConsoleMutex>::log(const details::log_msg &msg)\n         print_range_(formatted, 0, msg.color_range_start);\n \n         // in color range\n-        auto orig_attribs = set_foreground_color_(colors_[msg.level]);\n+        auto orig_attribs = static_cast<WORD>(set_foreground_color_(colors_[msg.level]));\n         print_range_(formatted, msg.color_range_start, msg.color_range_end);\n         // reset to orig colors\n-        ::SetConsoleTextAttribute(out_handle_, orig_attribs);\n+        ::SetConsoleTextAttribute(static_cast<HANDLE>(out_handle_), orig_attribs);\n         print_range_(formatted, msg.color_range_end, formatted.size());\n     }\n     else // print without colors if color range is invalid (or color is disabled)\n@@ -118,16 +126,16 @@ void SPDLOG_INLINE wincolor_sink<ConsoleMutex>::set_color_mode(color_mode mode)\n \n // set foreground color and return the orig console attributes (for resetting later)\n template<typename ConsoleMutex>\n-WORD SPDLOG_INLINE wincolor_sink<ConsoleMutex>::set_foreground_color_(WORD attribs)\n+std::uint16_t SPDLOG_INLINE wincolor_sink<ConsoleMutex>::set_foreground_color_(std::uint16_t attribs)\n {\n     CONSOLE_SCREEN_BUFFER_INFO orig_buffer_info;\n-    ::GetConsoleScreenBufferInfo(out_handle_, &orig_buffer_info);\n+    ::GetConsoleScreenBufferInfo(static_cast<HANDLE>(out_handle_), &orig_buffer_info);\n     WORD back_color = orig_buffer_info.wAttributes;\n     // retrieve the current background color\n     back_color &= static_cast<WORD>(~(FOREGROUND_RED | FOREGROUND_GREEN | FOREGROUND_BLUE | FOREGROUND_INTENSITY));\n     // keep the background color unchanged\n-    ::SetConsoleTextAttribute(out_handle_, attribs | back_color);\n-    return orig_buffer_info.wAttributes; // return orig attribs\n+    ::SetConsoleTextAttribute(static_cast<HANDLE>(out_handle_), static_cast<WORD>(attribs) | back_color);\n+    return static_cast<std::uint16_t>(orig_buffer_info.wAttributes); // return orig attribs\n }\n \n // print a range of formatted message to console\n@@ -135,7 +143,7 @@ template<typename ConsoleMutex>\n void SPDLOG_INLINE wincolor_sink<ConsoleMutex>::print_range_(const memory_buf_t &formatted, size_t start, size_t end)\n {\n     auto size = static_cast<DWORD>(end - start);\n-    ::WriteConsoleA(out_handle_, formatted.data() + start, size, nullptr, nullptr);\n+    ::WriteConsoleA(static_cast<HANDLE>(out_handle_), formatted.data() + start, size, nullptr, nullptr);\n }\n \n template<typename ConsoleMutex>\n@@ -147,7 +155,7 @@ void SPDLOG_INLINE wincolor_sink<ConsoleMutex>::write_to_file_(const memory_buf_\n     }\n     auto size = static_cast<DWORD>(formatted.size());\n     DWORD bytes_written = 0;\n-    bool ok = ::WriteFile(out_handle_, formatted.data(), size, &bytes_written, nullptr) != 0;\n+    bool ok = ::WriteFile(static_cast<HANDLE>(out_handle_), formatted.data(), size, &bytes_written, nullptr) != 0;\n     if (!ok)\n     {\n         throw_spdlog_ex(\"wincolor_sink: ::WriteFile() failed. GetLastError(): \" + std::to_string(::GetLastError()));\n@@ -165,6 +173,5 @@ template<typename ConsoleMutex>\n SPDLOG_INLINE wincolor_stderr_sink<ConsoleMutex>::wincolor_stderr_sink(color_mode mode)\n     : wincolor_sink<ConsoleMutex>(::GetStdHandle(STD_ERROR_HANDLE), mode)\n {}\n-\n } // namespace sinks\n } // namespace spdlog\ndiff --git a/include/spdlog/sinks/wincolor_sink.h b/include/spdlog/sinks/wincolor_sink.h\n--- a/include/spdlog/sinks/wincolor_sink.h\n+++ b/include/spdlog/sinks/wincolor_sink.h\n@@ -12,9 +12,7 @@\n #include <mutex>\n #include <string>\n #include <array>\n-\n-#include <spdlog/details/windows_include.h>\n-#include <wincon.h>\n+#include <cstdint>\n \n namespace spdlog {\n namespace sinks {\n@@ -26,21 +24,21 @@ template<typename ConsoleMutex>\n class wincolor_sink : public sink\n {\n public:\n-    const WORD BOLD = FOREGROUND_INTENSITY;\n-    const WORD RED = FOREGROUND_RED;\n-    const WORD GREEN = FOREGROUND_GREEN;\n-    const WORD CYAN = FOREGROUND_GREEN | FOREGROUND_BLUE;\n-    const WORD WHITE = FOREGROUND_RED | FOREGROUND_GREEN | FOREGROUND_BLUE;\n-    const WORD YELLOW = FOREGROUND_RED | FOREGROUND_GREEN;\n-\n-    wincolor_sink(HANDLE out_handle, color_mode mode);\n+    const std::uint16_t BOLD;\n+    const std::uint16_t RED;\n+    const std::uint16_t GREEN;\n+    const std::uint16_t CYAN;\n+    const std::uint16_t WHITE;\n+    const std::uint16_t YELLOW;\n+\n+    wincolor_sink(void *out_handle, color_mode mode);\n     ~wincolor_sink() override;\n \n     wincolor_sink(const wincolor_sink &other) = delete;\n     wincolor_sink &operator=(const wincolor_sink &other) = delete;\n \n     // change the color for the given level\n-    void set_color(level::level_enum level, WORD color);\n+    void set_color(level::level_enum level, std::uint16_t color);\n     void log(const details::log_msg &msg) final override;\n     void flush() final override;\n     void set_pattern(const std::string &pattern) override final;\n@@ -49,15 +47,15 @@ class wincolor_sink : public sink\n \n protected:\n     using mutex_t = typename ConsoleMutex::mutex_t;\n-    HANDLE out_handle_;\n+    void *out_handle_;\n     mutex_t &mutex_;\n     bool in_console_;\n     bool should_do_colors_;\n     std::unique_ptr<spdlog::formatter> formatter_;\n-    std::array<WORD, level::n_levels> colors_;\n+    std::array<std::uint16_t, level::n_levels> colors_;\n \n     // set foreground color and return the orig console attributes (for resetting later)\n-    WORD set_foreground_color_(WORD attribs);\n+    std::uint16_t set_foreground_color_(std::uint16_t attribs);\n \n     // print a range of formatted message to console\n     void print_range_(const memory_buf_t &formatted, size_t start, size_t end);\n@@ -85,7 +83,6 @@ using wincolor_stdout_sink_st = wincolor_stdout_sink<details::console_nullmutex>\n \n using wincolor_stderr_sink_mt = wincolor_stderr_sink<details::console_mutex>;\n using wincolor_stderr_sink_st = wincolor_stderr_sink<details::console_nullmutex>;\n-\n } // namespace sinks\n } // namespace spdlog\n \n",
        "test_patch": "diff --git a/tests/utils.cpp b/tests/utils.cpp\n--- a/tests/utils.cpp\n+++ b/tests/utils.cpp\n@@ -1,6 +1,8 @@\n #include \"includes.h\"\n \n-#ifndef _WIN32\n+#ifdef _WIN32\n+#include <Windows.h>\n+#else\n #include <sys/types.h>\n #include <dirent.h>\n #endif\n",
        "problem_statement": "wincolor_sink pulls in windows.h even with SPDLOG_COMPILED_LIB defined\nI don't think it would be too hard to split the dependencies into the inline file. I could make a pr for it if you're okay with that.\n",
        "hints_text": "Sure, pr would be welcome.",
        "created_at": "2020-12-26T11:48:09Z",
        "version": "1.8"
    }
}